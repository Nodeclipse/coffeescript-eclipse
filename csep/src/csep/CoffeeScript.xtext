grammar csep.CoffeeScript
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate coffeeScript "http://www.coffeescript.org/eclipse"

Model:
	assignments+=Assignment*;
		
Assignment:
	var=IDENTIFIER EQUAL Expr;

Expr: NUMBER;	

// XXX: terminals could go to a separate file, but I don't know how to persuade Eclipse;

terminal MINUS: 'dummy MINUS';
terminal PLUS: 'dummy PLUS';
terminal WHILE: 'dummy WHILE';
terminal UNTIL: 'dummy UNTIL';
terminal FOR: 'dummy FOR';
terminal IDENTIFIER: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal AT_SIGIL: 'dummy AT_SIGIL';
terminal LCURLY: 'dummy LCURLY';
terminal LBRACKET: 'dummy LBRACKET';
terminal NUMBER returns ecore::EInt: ('0'..'9')+;
terminal STRING: 'dummy STRING';
terminal LPAREN: 'dummy LPAREN';
terminal JS: 'dummy JS';
terminal REGEX: 'dummy REGEX';
terminal BOOL: 'dummy BOOL';
terminal SUPER: 'dummy SUPER';
terminal THIS: 'dummy THIS';
terminal HERECOMMENT: 'dummy HERECOMMENT';
terminal IF: 'dummy IF';
terminal FUNC_ARROW: 'dummy FUNC_ARROW';
terminal BOUND_FUNC_ARROW: 'dummy BOUND_FUNC_ARROW';
terminal MINUS_MINUS: 'dummy MINUS_MINUS';
terminal PLUS_PLUS: 'dummy PLUS_PLUS';
terminal SWITCH: 'dummy SWITCH';
terminal PARAM_START: 'dummy PARAM_START';
terminal CLASS: 'dummy CLASS';
terminal TRY: 'dummy TRY';
terminal STATEMENT: 'dummy STATEMENT';
terminal RETURN: 'dummy RETURN';
terminal THROW: 'dummy THROW';
terminal LOOP: 'dummy LOOP';
terminal UNARY: 'dummy UNARY';
terminal QUESTION: 'dummy QUESTION';
terminal MATH: 'dummy MATH';
terminal INDENT: 'dummy INDENT';
terminal SHIFT: 'dummy SHIFT';
terminal RELATION: 'dummy RELATION';
terminal COMPARE: 'dummy COMPARE';
terminal LOGIC: 'dummy LOGIC';
terminal POST_IF: 'dummy POST_IF';
terminal OUTDENT: 'dummy OUTDENT';
terminal CALL_START: 'dummy CALL_START';
terminal TERMINATOR: 'dummy TERMINATOR';
terminal INDEX_START: 'dummy INDEX_START';
terminal INDEX_SOAK: 'dummy INDEX_SOAK';
terminal INDEX_PROTO: 'dummy INDEX_PROTO';
terminal COMMA: 'dummy COMMA';
terminal DOT: 'dummy DOT';
terminal QUESTION_DOT: 'dummy QUESTION_DOT';
terminal DOUBLE_COLON: 'dummy DOUBLE_COLON';
terminal FUNC_EXIST: 'dummy FUNC_EXIST';
terminal INDEX_END: 'dummy INDEX_END';
terminal WHEN: 'dummy WHEN';
terminal RBRACKET: 'dummy RBRACKET';
terminal ELLIPSIS: 'dummy ELLIPSIS';
terminal LEADING_WHEN: 'dummy LEADING_WHEN';
terminal ELSE: 'dummy ELSE';
terminal EXTENDS: 'dummy EXTENDS';
terminal DOT_DOT: 'dummy DOT_DOT';
terminal RPAREN: 'dummy RPAREN';
terminal EQUAL: '=';
terminal BY: 'dummy BY';
terminal CALL_END: 'dummy CALL_END';
terminal FINALLY: 'dummy FINALLY';
terminal COLON_SLASH: 'dummy COLON_SLASH';
terminal FORIN: 'dummy FORIN';
terminal COMPOUND_ASSIGN: 'dummy COMPOUND_ASSIGN';
terminal PARAM_END: 'dummy PARAM_END';
terminal RCURLY: 'dummy RCURLY';
terminal OWN: 'dummy OWN';
terminal FOROF: 'dummy FOROF';
terminal COLON: 'dummy COLON';
terminal CATCH: 'dummy CATCH';
terminal THEN: 'dummy THEN';
terminal NEW: 'dummy NEW';
