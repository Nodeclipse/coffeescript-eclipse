grammar csep.CoffeeScript with csep.Tokens
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate coffeeScript "http://www.coffeescript.org/eclipse"

/**
 * The <var>Root</var> is the top-level node in the syntax tree. Since we parse
 * bottom-up, all parsing must end here.
 */
//Root: Body | Block TERMINATOR;
Root: Operation;

/**
 * Any list of statements and expressions, separated by line breaks or
 * semicolons.
 */
Body: Line (TERMINATOR lines+=Line)*;

/**
 * Block and statements, which make up a line in a body.
 */
Line: Expression;

/**
 * Pure statements which cannot be expressions.
 */
StatementRule: Comment | STATEMENT;

Comment: HERECOMMENT;

/**
 * All the different types of expressions in our language. The basic unit of
 * CoffeeScript is the <var>Expression</var> -- everything that can be an
 * expression is one. Blocks serve as the building blocks of many other rules,
 * making them somewhat circular.
 */
Expression: Assign;

/**
 * An indented block of expressions. Note that the [Rewriter](rewriter.html)
 * will convert some postfix forms into blocks for us, by adjusting the token
 * stream.
 */
Block: {Block} INDENT Body? OUTDENT;

Assign: IDENTIFIER EQUAL Operation;

Operation: CompareOp;

CompareOp returns Operation:
  AdditiveOp ({CompareOp.left=current} operator=COMPARE right=AdditiveOp)*;

AdditiveOp returns Operation:
  MathOp ({AdditiveOp.left=current} operator=(PLUS | MINUS) right=MathOp)*;
  
MathOp returns Operation:
 Primary ({MathOp.left=current} operator=MATH right=Primary)*;

Primary returns Operation:
 NumberLiteral |
 LPAREN Operation RPAREN;
 
NumberLiteral: value=NUMBER;
