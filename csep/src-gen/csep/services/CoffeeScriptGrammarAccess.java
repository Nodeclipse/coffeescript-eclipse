/*
* generated by Xtext
*/
package csep.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CoffeeScriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cTERMINATORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Root:
		//	(Body | Block TERMINATOR)?;
		public ParserRule getRule() { return rule; }

		//(Body | Block TERMINATOR)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//Body
		public RuleCall getBodyParserRuleCall_0() { return cBodyParserRuleCall_0; }

		//Block TERMINATOR
		public Group getGroup_1() { return cGroup_1; }

		//Block
		public RuleCall getBlockParserRuleCall_1_0() { return cBlockParserRuleCall_1_0; }

		//TERMINATOR
		public RuleCall getTERMINATORTerminalRuleCall_1_1() { return cTERMINATORTerminalRuleCall_1_1; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLinesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLinesLineParserRuleCall_0_0 = (RuleCall)cLinesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cTERMINATORTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cLinesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLinesLineParserRuleCall_1_1_0 = (RuleCall)cLinesAssignment_1_1.eContents().get(0);
		
		//Body:
		//	lines+=Line (TERMINATOR lines+=Line?)*;
		public ParserRule getRule() { return rule; }

		//lines+=Line (TERMINATOR lines+=Line?)*
		public Group getGroup() { return cGroup; }

		//lines+=Line
		public Assignment getLinesAssignment_0() { return cLinesAssignment_0; }

		//Line
		public RuleCall getLinesLineParserRuleCall_0_0() { return cLinesLineParserRuleCall_0_0; }

		//(TERMINATOR lines+=Line?)*
		public Group getGroup_1() { return cGroup_1; }

		//TERMINATOR
		public RuleCall getTERMINATORTerminalRuleCall_1_0() { return cTERMINATORTerminalRuleCall_1_0; }

		//lines+=Line?
		public Assignment getLinesAssignment_1_1() { return cLinesAssignment_1_1; }

		//Line
		public RuleCall getLinesLineParserRuleCall_1_1_0() { return cLinesLineParserRuleCall_1_1_0; }
	}

	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Line");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Line:
		//	Stmt | Expression;
		public ParserRule getRule() { return rule; }

		//Stmt | Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Stmt
		public RuleCall getStmtParserRuleCall_0() { return cStmtParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}

	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReturnStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cThrowStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRequireStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cClassDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Assignment cStatementAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cStatementSTATEMENTTerminalRuleCall_5_0 = (RuleCall)cStatementAssignment_5.eContents().get(0);
		
		//Stmt:
		//	ReturnStmt | ThrowStmt | RequireStmt | Comment | ClassDeclaration | statement=STATEMENT;
		public ParserRule getRule() { return rule; }

		//ReturnStmt | ThrowStmt | RequireStmt | Comment | ClassDeclaration | statement=STATEMENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReturnStmt
		public RuleCall getReturnStmtParserRuleCall_0() { return cReturnStmtParserRuleCall_0; }

		//ThrowStmt
		public RuleCall getThrowStmtParserRuleCall_1() { return cThrowStmtParserRuleCall_1; }

		//RequireStmt
		public RuleCall getRequireStmtParserRuleCall_2() { return cRequireStmtParserRuleCall_2; }

		//Comment
		public RuleCall getCommentParserRuleCall_3() { return cCommentParserRuleCall_3; }

		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_4() { return cClassDeclarationParserRuleCall_4; }

		//statement=STATEMENT
		public Assignment getStatementAssignment_5() { return cStatementAssignment_5; }

		//STATEMENT
		public RuleCall getStatementSTATEMENTTerminalRuleCall_5_0() { return cStatementSTATEMENTTerminalRuleCall_5_0; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Assignment cCommentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommentHERECOMMENTTerminalRuleCall_0 = (RuleCall)cCommentAssignment.eContents().get(0);
		
		//Comment:
		//	comment=HERECOMMENT;
		public ParserRule getRule() { return rule; }

		//comment=HERECOMMENT
		public Assignment getCommentAssignment() { return cCommentAssignment; }

		//HERECOMMENT
		public RuleCall getCommentHERECOMMENTTerminalRuleCall_0() { return cCommentHERECOMMENTTerminalRuleCall_0; }
	}

	public class RequireStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequireStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cImportedNamespaceIdParserRuleCall_0_0_0_0 = (RuleCall)cImportedNamespaceAssignment_0_0_0.eContents().get(0);
		private final RuleCall cEQUALTerminalRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Keyword cRequireKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final RuleCall cCALL_STARTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cUriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUriSTRINGTerminalRuleCall_2_0 = (RuleCall)cUriAssignment_2.eContents().get(0);
		private final RuleCall cCALL_ENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		/// **
		// * Treat it a special way, because it takes care of import
		// * / RequireStmt:
		//	=> (importedNamespace=Id EQUAL "require") CALL_START uri=STRING CALL_END;
		public ParserRule getRule() { return rule; }

		//=> (importedNamespace=Id EQUAL "require") CALL_START uri=STRING CALL_END
		public Group getGroup() { return cGroup; }

		//=> (importedNamespace=Id EQUAL "require")
		public Group getGroup_0() { return cGroup_0; }

		//importedNamespace=Id EQUAL "require"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//importedNamespace=Id
		public Assignment getImportedNamespaceAssignment_0_0_0() { return cImportedNamespaceAssignment_0_0_0; }

		//Id
		public RuleCall getImportedNamespaceIdParserRuleCall_0_0_0_0() { return cImportedNamespaceIdParserRuleCall_0_0_0_0; }

		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_0_0_1() { return cEQUALTerminalRuleCall_0_0_1; }

		//"require"
		public Keyword getRequireKeyword_0_0_2() { return cRequireKeyword_0_0_2; }

		//CALL_START
		public RuleCall getCALL_STARTTerminalRuleCall_1() { return cCALL_STARTTerminalRuleCall_1; }

		//uri=STRING
		public Assignment getUriAssignment_2() { return cUriAssignment_2; }

		//STRING
		public RuleCall getUriSTRINGTerminalRuleCall_2_0() { return cUriSTRINGTerminalRuleCall_2_0; }

		//CALL_END
		public RuleCall getCALL_ENDTerminalRuleCall_3() { return cCALL_ENDTerminalRuleCall_3; }
	}

	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cRETURNTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cPOST_IFTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		
		//ReturnStmt:
		//	{ReturnStmt} RETURN expression=Expression? (POST_IF condition=Expression)?;
		public ParserRule getRule() { return rule; }

		//{ReturnStmt} RETURN expression=Expression? (POST_IF condition=Expression)?
		public Group getGroup() { return cGroup; }

		//{ReturnStmt}
		public Action getReturnStmtAction_0() { return cReturnStmtAction_0; }

		//RETURN
		public RuleCall getRETURNTerminalRuleCall_1() { return cRETURNTerminalRuleCall_1; }

		//expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//(POST_IF condition=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//POST_IF
		public RuleCall getPOST_IFTerminalRuleCall_3_0() { return cPOST_IFTerminalRuleCall_3_0; }

		//condition=Expression
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_3_1_0() { return cConditionExpressionParserRuleCall_3_1_0; }
	}

	public class ThrowStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThrowStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTHROWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//ThrowStmt:
		//	THROW exp=Expression;
		public ParserRule getRule() { return rule; }

		//THROW exp=Expression
		public Group getGroup() { return cGroup; }

		//THROW
		public RuleCall getTHROWTerminalRuleCall_0() { return cTHROWTerminalRuleCall_0; }

		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
	}

	public class SuperClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuperClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		// * Coffeescript is permissive, it can be any expression, but we want to be able to check it as crossref
		// * / SuperClass:
		//	IdRef | Property;
		public ParserRule getRule() { return rule; }

		//IdRef | Property
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdRef
		public RuleCall getIdRefParserRuleCall_0() { return cIdRefParserRuleCall_0; }

		//Property
		public RuleCall getPropertyParserRuleCall_1() { return cPropertyParserRuleCall_1; }
	}

	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCLASSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cBodyBlockParserRuleCall_2_0_0 = (RuleCall)cBodyAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final RuleCall cEXTENDSTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cExtendAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExtendSuperClassParserRuleCall_2_1_1_0 = (RuleCall)cExtendAssignment_2_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_1_2_0 = (RuleCall)cBodyAssignment_2_1_2.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cNameAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final Alternatives cNameAlternatives_2_2_0_0 = (Alternatives)cNameAssignment_2_2_0.eContents().get(0);
		private final RuleCall cNameIdParserRuleCall_2_2_0_0_0 = (RuleCall)cNameAlternatives_2_2_0_0.eContents().get(0);
		private final RuleCall cNamePropertyParserRuleCall_2_2_0_0_1 = (RuleCall)cNameAlternatives_2_2_0_0.eContents().get(1);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final RuleCall cEXTENDSTerminalRuleCall_2_2_1_0 = (RuleCall)cGroup_2_2_1.eContents().get(0);
		private final Assignment cExtendAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final RuleCall cExtendSuperClassParserRuleCall_2_2_1_1_0 = (RuleCall)cExtendAssignment_2_2_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_2_2_0 = (RuleCall)cBodyAssignment_2_2_2.eContents().get(0);
		
		//ClassDeclaration:
		//	{ClassDeclaration} CLASS (body=Block | EXTENDS extend=SuperClass body=Block? | name=(Id | Property) (EXTENDS
		//	extend=SuperClass)? body=Block)?;
		public ParserRule getRule() { return rule; }

		//{ClassDeclaration} CLASS (body=Block | EXTENDS extend=SuperClass body=Block? | name=(Id | Property) (EXTENDS
		//extend=SuperClass)? body=Block)?
		public Group getGroup() { return cGroup; }

		//{ClassDeclaration}
		public Action getClassDeclarationAction_0() { return cClassDeclarationAction_0; }

		//CLASS
		public RuleCall getCLASSTerminalRuleCall_1() { return cCLASSTerminalRuleCall_1; }

		//(body=Block | EXTENDS extend=SuperClass body=Block? | name=(Id | Property) (EXTENDS extend=SuperClass)? body=Block)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//body=Block
		public Assignment getBodyAssignment_2_0() { return cBodyAssignment_2_0; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0_0() { return cBodyBlockParserRuleCall_2_0_0; }

		//EXTENDS extend=SuperClass body=Block?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//EXTENDS
		public RuleCall getEXTENDSTerminalRuleCall_2_1_0() { return cEXTENDSTerminalRuleCall_2_1_0; }

		//extend=SuperClass
		public Assignment getExtendAssignment_2_1_1() { return cExtendAssignment_2_1_1; }

		//SuperClass
		public RuleCall getExtendSuperClassParserRuleCall_2_1_1_0() { return cExtendSuperClassParserRuleCall_2_1_1_0; }

		//body=Block?
		public Assignment getBodyAssignment_2_1_2() { return cBodyAssignment_2_1_2; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_2_1_2_0() { return cBodyBlockParserRuleCall_2_1_2_0; }

		//name=(Id | Property) (EXTENDS extend=SuperClass)? body=Block
		public Group getGroup_2_2() { return cGroup_2_2; }

		//name=(Id | Property)
		public Assignment getNameAssignment_2_2_0() { return cNameAssignment_2_2_0; }

		//Id | Property
		public Alternatives getNameAlternatives_2_2_0_0() { return cNameAlternatives_2_2_0_0; }

		//Id
		public RuleCall getNameIdParserRuleCall_2_2_0_0_0() { return cNameIdParserRuleCall_2_2_0_0_0; }

		//Property
		public RuleCall getNamePropertyParserRuleCall_2_2_0_0_1() { return cNamePropertyParserRuleCall_2_2_0_0_1; }

		//(EXTENDS extend=SuperClass)?
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//EXTENDS
		public RuleCall getEXTENDSTerminalRuleCall_2_2_1_0() { return cEXTENDSTerminalRuleCall_2_2_1_0; }

		//extend=SuperClass
		public Assignment getExtendAssignment_2_2_1_1() { return cExtendAssignment_2_2_1_1; }

		//SuperClass
		public RuleCall getExtendSuperClassParserRuleCall_2_2_1_1_0() { return cExtendSuperClassParserRuleCall_2_2_1_1_0; }

		//body=Block
		public Assignment getBodyAssignment_2_2_2() { return cBodyAssignment_2_2_2; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_2_2_2_0() { return cBodyBlockParserRuleCall_2_2_2_0; }
	}

	public class AssignedClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignedClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCLASSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cEXTENDSTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Assignment cExtendAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExtendSuperClassParserRuleCall_2_0_1_0 = (RuleCall)cExtendAssignment_2_0_1.eContents().get(0);
		private final Assignment cBodyAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_0_2_0 = (RuleCall)cBodyAssignment_2_0_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Alternatives cNameAlternatives_2_1_0_0 = (Alternatives)cNameAssignment_2_1_0.eContents().get(0);
		private final RuleCall cNameIdParserRuleCall_2_1_0_0_0 = (RuleCall)cNameAlternatives_2_1_0_0.eContents().get(0);
		private final RuleCall cNamePropertyParserRuleCall_2_1_0_0_1 = (RuleCall)cNameAlternatives_2_1_0_0.eContents().get(1);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final RuleCall cEXTENDSTerminalRuleCall_2_1_1_0 = (RuleCall)cGroup_2_1_1.eContents().get(0);
		private final Assignment cExtendAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cExtendSuperClassParserRuleCall_2_1_1_1_0 = (RuleCall)cExtendAssignment_2_1_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_1_2_0 = (RuleCall)cBodyAssignment_2_1_2.eContents().get(0);
		
		/// **
		// * FIXME: it should be the same as ClassDeclaration, but it would result in a non-LL decision,
		// * so I just removed the problematic options (a class body and a name or a superclass is required).
		// * / AssignedClassDeclaration:
		//	{ClassDeclaration} CLASS (EXTENDS extend=SuperClass body=Block | name=(Id | Property) (EXTENDS extend=SuperClass)?
		//	body=Block)?;
		public ParserRule getRule() { return rule; }

		//{ClassDeclaration} CLASS (EXTENDS extend=SuperClass body=Block | name=(Id | Property) (EXTENDS extend=SuperClass)?
		//body=Block)?
		public Group getGroup() { return cGroup; }

		//{ClassDeclaration}
		public Action getClassDeclarationAction_0() { return cClassDeclarationAction_0; }

		//CLASS
		public RuleCall getCLASSTerminalRuleCall_1() { return cCLASSTerminalRuleCall_1; }

		//(EXTENDS extend=SuperClass body=Block | name=(Id | Property) (EXTENDS extend=SuperClass)? body=Block)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//EXTENDS extend=SuperClass body=Block
		public Group getGroup_2_0() { return cGroup_2_0; }

		//EXTENDS
		public RuleCall getEXTENDSTerminalRuleCall_2_0_0() { return cEXTENDSTerminalRuleCall_2_0_0; }

		//extend=SuperClass
		public Assignment getExtendAssignment_2_0_1() { return cExtendAssignment_2_0_1; }

		//SuperClass
		public RuleCall getExtendSuperClassParserRuleCall_2_0_1_0() { return cExtendSuperClassParserRuleCall_2_0_1_0; }

		//body=Block
		public Assignment getBodyAssignment_2_0_2() { return cBodyAssignment_2_0_2; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0_2_0() { return cBodyBlockParserRuleCall_2_0_2_0; }

		//name=(Id | Property) (EXTENDS extend=SuperClass)? body=Block
		public Group getGroup_2_1() { return cGroup_2_1; }

		//name=(Id | Property)
		public Assignment getNameAssignment_2_1_0() { return cNameAssignment_2_1_0; }

		//Id | Property
		public Alternatives getNameAlternatives_2_1_0_0() { return cNameAlternatives_2_1_0_0; }

		//Id
		public RuleCall getNameIdParserRuleCall_2_1_0_0_0() { return cNameIdParserRuleCall_2_1_0_0_0; }

		//Property
		public RuleCall getNamePropertyParserRuleCall_2_1_0_0_1() { return cNamePropertyParserRuleCall_2_1_0_0_1; }

		//(EXTENDS extend=SuperClass)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//EXTENDS
		public RuleCall getEXTENDSTerminalRuleCall_2_1_1_0() { return cEXTENDSTerminalRuleCall_2_1_1_0; }

		//extend=SuperClass
		public Assignment getExtendAssignment_2_1_1_1() { return cExtendAssignment_2_1_1_1; }

		//SuperClass
		public RuleCall getExtendSuperClassParserRuleCall_2_1_1_1_0() { return cExtendSuperClassParserRuleCall_2_1_1_1_0; }

		//body=Block
		public Assignment getBodyAssignment_2_1_2() { return cBodyAssignment_2_1_2; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_2_1_2_0() { return cBodyBlockParserRuleCall_2_1_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cPostfixParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Postfix;
		public ParserRule getRule() { return rule; }

		//Postfix
		public RuleCall getPostfixParserRuleCall() { return cPostfixParserRuleCall; }
	}

	public class PostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Postfix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cPOST_IFTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Action cIfDummyAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cConditionAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_1_0_2_0 = (RuleCall)cConditionAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cFORTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Action cForDummyAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cBodyAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cBodyForBodyParserRuleCall_1_1_2_0 = (RuleCall)cBodyAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cWHILETerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Action cWhileDummyAction_1_2_1 = (Action)cGroup_1_2.eContents().get(1);
		private final Assignment cBodyAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cBodyExpressionParserRuleCall_1_2_2_0 = (RuleCall)cBodyAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final RuleCall cWHENTerminalRuleCall_1_2_3_0 = (RuleCall)cGroup_1_2_3.eContents().get(0);
		private final Assignment cWhenAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cWhenExpressionParserRuleCall_1_2_3_1_0 = (RuleCall)cWhenAssignment_1_2_3_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final RuleCall cUNTILTerminalRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final Action cUntilDummyAction_1_3_1 = (Action)cGroup_1_3.eContents().get(1);
		private final Assignment cBodyAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cBodyExpressionParserRuleCall_1_3_2_0 = (RuleCall)cBodyAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_3_3 = (Group)cGroup_1_3.eContents().get(3);
		private final RuleCall cWHENTerminalRuleCall_1_3_3_0 = (RuleCall)cGroup_1_3_3.eContents().get(0);
		private final Assignment cWhenAssignment_1_3_3_1 = (Assignment)cGroup_1_3_3.eContents().get(1);
		private final RuleCall cWhenExpressionParserRuleCall_1_3_3_1_0 = (RuleCall)cWhenAssignment_1_3_3_1.eContents().get(0);
		
		//// right-assoc
		//// Note: the lexer seems to know it should give a POST_IF token here
		//Postfix returns Expression: //Assignment postfix+=(PostfixIf | ForBody)?;
		//	Assignment (POST_IF {If.dummy=current} condition=Expression | FOR {For.dummy=current} body=ForBody | WHILE
		//	{While.dummy=current} body=Expression (WHEN when=Expression)? | UNTIL {Until.dummy=current} body=Expression (WHEN
		//	when=Expression)?)?;
		public ParserRule getRule() { return rule; }

		////Assignment postfix+=(PostfixIf | ForBody)?;
		//Assignment (POST_IF {If.dummy=current} condition=Expression | FOR {For.dummy=current} body=ForBody | WHILE
		//{While.dummy=current} body=Expression (WHEN when=Expression)? | UNTIL {Until.dummy=current} body=Expression (WHEN
		//when=Expression)?)?
		public Group getGroup() { return cGroup; }

		////Assignment postfix+=(PostfixIf | ForBody)?;
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//(=> POST_IF {If.dummy=current} condition=Expression | FOR {For.dummy=current} body=ForBody | WHILE {While.dummy=current}
		//body=Expression (WHEN when=Expression)? | UNTIL {Until.dummy=current} body=Expression (WHEN when=Expression)?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> POST_IF {If.dummy=current} condition=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> POST_IF
		public RuleCall getPOST_IFTerminalRuleCall_1_0_0() { return cPOST_IFTerminalRuleCall_1_0_0; }

		//{If.dummy=current}
		public Action getIfDummyAction_1_0_1() { return cIfDummyAction_1_0_1; }

		//condition=Expression
		public Assignment getConditionAssignment_1_0_2() { return cConditionAssignment_1_0_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0_2_0() { return cConditionExpressionParserRuleCall_1_0_2_0; }

		//=> FOR {For.dummy=current} body=ForBody
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> FOR
		public RuleCall getFORTerminalRuleCall_1_1_0() { return cFORTerminalRuleCall_1_1_0; }

		//{For.dummy=current}
		public Action getForDummyAction_1_1_1() { return cForDummyAction_1_1_1; }

		//body=ForBody
		public Assignment getBodyAssignment_1_1_2() { return cBodyAssignment_1_1_2; }

		//ForBody
		public RuleCall getBodyForBodyParserRuleCall_1_1_2_0() { return cBodyForBodyParserRuleCall_1_1_2_0; }

		//=> WHILE {While.dummy=current} body=Expression (WHEN when=Expression)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> WHILE
		public RuleCall getWHILETerminalRuleCall_1_2_0() { return cWHILETerminalRuleCall_1_2_0; }

		//{While.dummy=current}
		public Action getWhileDummyAction_1_2_1() { return cWhileDummyAction_1_2_1; }

		//body=Expression
		public Assignment getBodyAssignment_1_2_2() { return cBodyAssignment_1_2_2; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_1_2_2_0() { return cBodyExpressionParserRuleCall_1_2_2_0; }

		//(=> WHEN when=Expression)?
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }

		//=> WHEN
		public RuleCall getWHENTerminalRuleCall_1_2_3_0() { return cWHENTerminalRuleCall_1_2_3_0; }

		//when=Expression
		public Assignment getWhenAssignment_1_2_3_1() { return cWhenAssignment_1_2_3_1; }

		//Expression
		public RuleCall getWhenExpressionParserRuleCall_1_2_3_1_0() { return cWhenExpressionParserRuleCall_1_2_3_1_0; }

		//=> UNTIL {Until.dummy=current} body=Expression (WHEN when=Expression)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//=> UNTIL
		public RuleCall getUNTILTerminalRuleCall_1_3_0() { return cUNTILTerminalRuleCall_1_3_0; }

		//{Until.dummy=current}
		public Action getUntilDummyAction_1_3_1() { return cUntilDummyAction_1_3_1; }

		//body=Expression
		public Assignment getBodyAssignment_1_3_2() { return cBodyAssignment_1_3_2; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_1_3_2_0() { return cBodyExpressionParserRuleCall_1_3_2_0; }

		//(=> WHEN when=Expression)?
		public Group getGroup_1_3_3() { return cGroup_1_3_3; }

		//=> WHEN
		public RuleCall getWHENTerminalRuleCall_1_3_3_0() { return cWHENTerminalRuleCall_1_3_3_0; }

		//when=Expression
		public Assignment getWhenAssignment_1_3_3_1() { return cWhenAssignment_1_3_3_1; }

		//Expression
		public RuleCall getWhenExpressionParserRuleCall_1_3_3_1_0() { return cWhenExpressionParserRuleCall_1_3_3_1_0; }
	}

	public class ForBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOWNTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIndexesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexesForValueParserRuleCall_1_0 = (RuleCall)cIndexesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cIndexesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexesForValueParserRuleCall_2_1_0 = (RuleCall)cIndexesAssignment_2_1.eContents().get(0);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceForSourceParserRuleCall_3_0 = (RuleCall)cSourceAssignment_3.eContents().get(0);
		
		//ForBody returns Expression: //FIXME: Range |
		//	OWN? indexes+=ForValue (COMMA indexes+=ForValue)* source=ForSource;
		public ParserRule getRule() { return rule; }

		////FIXME: Range |
		//OWN? indexes+=ForValue (COMMA indexes+=ForValue)* source=ForSource
		public Group getGroup() { return cGroup; }

		////FIXME: Range |
		//OWN?
		public RuleCall getOWNTerminalRuleCall_0() { return cOWNTerminalRuleCall_0; }

		//indexes+=ForValue
		public Assignment getIndexesAssignment_1() { return cIndexesAssignment_1; }

		//ForValue
		public RuleCall getIndexesForValueParserRuleCall_1_0() { return cIndexesForValueParserRuleCall_1_0; }

		//(COMMA indexes+=ForValue)*
		public Group getGroup_2() { return cGroup_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }

		//indexes+=ForValue
		public Assignment getIndexesAssignment_2_1() { return cIndexesAssignment_2_1; }

		//ForValue
		public RuleCall getIndexesForValueParserRuleCall_2_1_0() { return cIndexesForValueParserRuleCall_2_1_0; }

		//source=ForSource
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }

		//ForSource
		public RuleCall getSourceForSourceParserRuleCall_3_0() { return cSourceForSourceParserRuleCall_3_0; }
	}

	public class ForValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForValue");
		private final RuleCall cIdParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////FIXME | Array | Dictionary;
		//ForValue:
		//	Id;
		public ParserRule getRule() { return rule; }

		//Id
		public RuleCall getIdParserRuleCall() { return cIdParserRuleCall; }
	}

	public class ForSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForSourceAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cFOROFTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cSourceAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cSourceExpressionParserRuleCall_1_0_1_0 = (RuleCall)cSourceAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final RuleCall cWHENTerminalRuleCall_1_0_2_0 = (RuleCall)cGroup_1_0_2.eContents().get(0);
		private final Assignment cWhenAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cWhenExpressionParserRuleCall_1_0_2_1_0 = (RuleCall)cWhenAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cFORINTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cSourceAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSourceExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSourceAssignment_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_2 = (Alternatives)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_1_2_0 = (Group)cAlternatives_1_1_2.eContents().get(0);
		private final RuleCall cWHENTerminalRuleCall_1_1_2_0_0 = (RuleCall)cGroup_1_1_2_0.eContents().get(0);
		private final Assignment cWhenAssignment_1_1_2_0_1 = (Assignment)cGroup_1_1_2_0.eContents().get(1);
		private final RuleCall cWhenExpressionParserRuleCall_1_1_2_0_1_0 = (RuleCall)cWhenAssignment_1_1_2_0_1.eContents().get(0);
		private final Group cGroup_1_1_2_0_2 = (Group)cGroup_1_1_2_0.eContents().get(2);
		private final RuleCall cBYTerminalRuleCall_1_1_2_0_2_0 = (RuleCall)cGroup_1_1_2_0_2.eContents().get(0);
		private final Assignment cByAssignment_1_1_2_0_2_1 = (Assignment)cGroup_1_1_2_0_2.eContents().get(1);
		private final RuleCall cByExpressionParserRuleCall_1_1_2_0_2_1_0 = (RuleCall)cByAssignment_1_1_2_0_2_1.eContents().get(0);
		private final Group cGroup_1_1_2_1 = (Group)cAlternatives_1_1_2.eContents().get(1);
		private final RuleCall cBYTerminalRuleCall_1_1_2_1_0 = (RuleCall)cGroup_1_1_2_1.eContents().get(0);
		private final Assignment cByAssignment_1_1_2_1_1 = (Assignment)cGroup_1_1_2_1.eContents().get(1);
		private final RuleCall cByExpressionParserRuleCall_1_1_2_1_1_0 = (RuleCall)cByAssignment_1_1_2_1_1.eContents().get(0);
		private final Group cGroup_1_1_2_1_2 = (Group)cGroup_1_1_2_1.eContents().get(2);
		private final RuleCall cWHENTerminalRuleCall_1_1_2_1_2_0 = (RuleCall)cGroup_1_1_2_1_2.eContents().get(0);
		private final Assignment cWhenAssignment_1_1_2_1_2_1 = (Assignment)cGroup_1_1_2_1_2.eContents().get(1);
		private final RuleCall cWhenExpressionParserRuleCall_1_1_2_1_2_1_0 = (RuleCall)cWhenAssignment_1_1_2_1_2_1.eContents().get(0);
		
		//ForSource:
		//	{ForSource} (FOROF source=Expression (WHEN when=Expression)? | FORIN source=Expression (WHEN when=Expression (BY
		//	by=Expression)? | BY by=Expression (WHEN when=Expression)?)?);
		public ParserRule getRule() { return rule; }

		//{ForSource} (FOROF source=Expression (WHEN when=Expression)? | FORIN source=Expression (WHEN when=Expression (BY
		//by=Expression)? | BY by=Expression (WHEN when=Expression)?)?)
		public Group getGroup() { return cGroup; }

		//{ForSource}
		public Action getForSourceAction_0() { return cForSourceAction_0; }

		//=> FOROF source=Expression (WHEN when=Expression)? | FORIN source=Expression (WHEN when=Expression (BY by=Expression)? |
		//BY by=Expression (WHEN when=Expression)?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> FOROF source=Expression (WHEN when=Expression)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> FOROF
		public RuleCall getFOROFTerminalRuleCall_1_0_0() { return cFOROFTerminalRuleCall_1_0_0; }

		//source=Expression
		public Assignment getSourceAssignment_1_0_1() { return cSourceAssignment_1_0_1; }

		//Expression
		public RuleCall getSourceExpressionParserRuleCall_1_0_1_0() { return cSourceExpressionParserRuleCall_1_0_1_0; }

		//(=> WHEN when=Expression)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//=> WHEN
		public RuleCall getWHENTerminalRuleCall_1_0_2_0() { return cWHENTerminalRuleCall_1_0_2_0; }

		//when=Expression
		public Assignment getWhenAssignment_1_0_2_1() { return cWhenAssignment_1_0_2_1; }

		//Expression
		public RuleCall getWhenExpressionParserRuleCall_1_0_2_1_0() { return cWhenExpressionParserRuleCall_1_0_2_1_0; }

		//=> FORIN source=Expression (WHEN when=Expression (BY by=Expression)? | BY by=Expression (WHEN when=Expression)?)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> FORIN
		public RuleCall getFORINTerminalRuleCall_1_1_0() { return cFORINTerminalRuleCall_1_1_0; }

		//source=Expression
		public Assignment getSourceAssignment_1_1_1() { return cSourceAssignment_1_1_1; }

		//Expression
		public RuleCall getSourceExpressionParserRuleCall_1_1_1_0() { return cSourceExpressionParserRuleCall_1_1_1_0; }

		//(=> WHEN when=Expression (BY by=Expression)? | BY by=Expression (WHEN when=Expression)?)?
		public Alternatives getAlternatives_1_1_2() { return cAlternatives_1_1_2; }

		//=> WHEN when=Expression (BY by=Expression)?
		public Group getGroup_1_1_2_0() { return cGroup_1_1_2_0; }

		//=> WHEN
		public RuleCall getWHENTerminalRuleCall_1_1_2_0_0() { return cWHENTerminalRuleCall_1_1_2_0_0; }

		//when=Expression
		public Assignment getWhenAssignment_1_1_2_0_1() { return cWhenAssignment_1_1_2_0_1; }

		//Expression
		public RuleCall getWhenExpressionParserRuleCall_1_1_2_0_1_0() { return cWhenExpressionParserRuleCall_1_1_2_0_1_0; }

		//(=> BY by=Expression)?
		public Group getGroup_1_1_2_0_2() { return cGroup_1_1_2_0_2; }

		//=> BY
		public RuleCall getBYTerminalRuleCall_1_1_2_0_2_0() { return cBYTerminalRuleCall_1_1_2_0_2_0; }

		//by=Expression
		public Assignment getByAssignment_1_1_2_0_2_1() { return cByAssignment_1_1_2_0_2_1; }

		//Expression
		public RuleCall getByExpressionParserRuleCall_1_1_2_0_2_1_0() { return cByExpressionParserRuleCall_1_1_2_0_2_1_0; }

		//=> BY by=Expression (WHEN when=Expression)?
		public Group getGroup_1_1_2_1() { return cGroup_1_1_2_1; }

		//=> BY
		public RuleCall getBYTerminalRuleCall_1_1_2_1_0() { return cBYTerminalRuleCall_1_1_2_1_0; }

		//by=Expression
		public Assignment getByAssignment_1_1_2_1_1() { return cByAssignment_1_1_2_1_1; }

		//Expression
		public RuleCall getByExpressionParserRuleCall_1_1_2_1_1_0() { return cByExpressionParserRuleCall_1_1_2_1_1_0; }

		//(=> WHEN when=Expression)?
		public Group getGroup_1_1_2_1_2() { return cGroup_1_1_2_1_2; }

		//=> WHEN
		public RuleCall getWHENTerminalRuleCall_1_1_2_1_2_0() { return cWHENTerminalRuleCall_1_1_2_1_2_0; }

		//when=Expression
		public Assignment getWhenAssignment_1_1_2_1_2_1() { return cWhenAssignment_1_1_2_1_2_1; }

		//Expression
		public RuleCall getWhenExpressionParserRuleCall_1_1_2_1_2_1_0() { return cWhenExpressionParserRuleCall_1_1_2_1_2_1_0; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cLBRACKETTerminalRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Assignment cStartAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cStartExpressionParserRuleCall_0_0_1_0 = (RuleCall)cStartAssignment_0_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_0_2 = (Alternatives)cGroup_0_0.eContents().get(2);
		private final RuleCall cDOT_DOTTerminalRuleCall_0_0_2_0 = (RuleCall)cAlternatives_0_0_2.eContents().get(0);
		private final RuleCall cELLIPSISTerminalRuleCall_0_0_2_1 = (RuleCall)cAlternatives_0_0_2.eContents().get(1);
		private final Assignment cEndAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEndExpressionParserRuleCall_1_0 = (RuleCall)cEndAssignment_1.eContents().get(0);
		private final RuleCall cRBRACKETTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Range:
		//	=> (LBRACKET start=Expression (DOT_DOT | ELLIPSIS)) end=Expression RBRACKET;
		public ParserRule getRule() { return rule; }

		//=> (LBRACKET start=Expression (DOT_DOT | ELLIPSIS)) end=Expression RBRACKET
		public Group getGroup() { return cGroup; }

		//=> (LBRACKET start=Expression (DOT_DOT | ELLIPSIS))
		public Group getGroup_0() { return cGroup_0; }

		//LBRACKET start=Expression (DOT_DOT | ELLIPSIS)
		public Group getGroup_0_0() { return cGroup_0_0; }

		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_0_0_0() { return cLBRACKETTerminalRuleCall_0_0_0; }

		//start=Expression
		public Assignment getStartAssignment_0_0_1() { return cStartAssignment_0_0_1; }

		//Expression
		public RuleCall getStartExpressionParserRuleCall_0_0_1_0() { return cStartExpressionParserRuleCall_0_0_1_0; }

		//DOT_DOT | ELLIPSIS
		public Alternatives getAlternatives_0_0_2() { return cAlternatives_0_0_2; }

		//DOT_DOT
		public RuleCall getDOT_DOTTerminalRuleCall_0_0_2_0() { return cDOT_DOTTerminalRuleCall_0_0_2_0; }

		//ELLIPSIS
		public RuleCall getELLIPSISTerminalRuleCall_0_0_2_1() { return cELLIPSISTerminalRuleCall_0_0_2_1; }

		//end=Expression
		public Assignment getEndAssignment_1() { return cEndAssignment_1; }

		//Expression
		public RuleCall getEndExpressionParserRuleCall_1_0() { return cEndExpressionParserRuleCall_1_0; }

		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_2() { return cRBRACKETTerminalRuleCall_2; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cGroup_0_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_0_0_0 = (Assignment)cGroup_0_0_0.eContents().get(0);
		private final RuleCall cLeftAssignableParserRuleCall_0_0_0_0_0 = (RuleCall)cLeftAssignment_0_0_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_0_0_1 = (Assignment)cGroup_0_0_0.eContents().get(1);
		private final Alternatives cOperatorAlternatives_0_0_0_1_0 = (Alternatives)cOperatorAssignment_0_0_0_1.eContents().get(0);
		private final RuleCall cOperatorEQUALTerminalRuleCall_0_0_0_1_0_0 = (RuleCall)cOperatorAlternatives_0_0_0_1_0.eContents().get(0);
		private final RuleCall cOperatorCOMPOUND_ASSIGNTerminalRuleCall_0_0_0_1_0_1 = (RuleCall)cOperatorAlternatives_0_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRightAssignedParserRuleCall_0_1_0 = (RuleCall)cRightAssignment_0_1.eContents().get(0);
		private final RuleCall cLogicOpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Assignment returns Expression:
		//	=> (left=Assignable operator=(EQUAL | COMPOUND_ASSIGN)) right=Assigned | LogicOp;
		public ParserRule getRule() { return rule; }

		//=> (left=Assignable operator=(EQUAL | COMPOUND_ASSIGN)) right=Assigned | LogicOp
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> (left=Assignable operator=(EQUAL | COMPOUND_ASSIGN)) right=Assigned
		public Group getGroup_0() { return cGroup_0; }

		//=> (left=Assignable operator=(EQUAL | COMPOUND_ASSIGN))
		public Group getGroup_0_0() { return cGroup_0_0; }

		//left=Assignable operator=(EQUAL | COMPOUND_ASSIGN)
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//left=Assignable
		public Assignment getLeftAssignment_0_0_0_0() { return cLeftAssignment_0_0_0_0; }

		//Assignable
		public RuleCall getLeftAssignableParserRuleCall_0_0_0_0_0() { return cLeftAssignableParserRuleCall_0_0_0_0_0; }

		//operator=(EQUAL | COMPOUND_ASSIGN)
		public Assignment getOperatorAssignment_0_0_0_1() { return cOperatorAssignment_0_0_0_1; }

		//EQUAL | COMPOUND_ASSIGN
		public Alternatives getOperatorAlternatives_0_0_0_1_0() { return cOperatorAlternatives_0_0_0_1_0; }

		//EQUAL
		public RuleCall getOperatorEQUALTerminalRuleCall_0_0_0_1_0_0() { return cOperatorEQUALTerminalRuleCall_0_0_0_1_0_0; }

		//COMPOUND_ASSIGN
		public RuleCall getOperatorCOMPOUND_ASSIGNTerminalRuleCall_0_0_0_1_0_1() { return cOperatorCOMPOUND_ASSIGNTerminalRuleCall_0_0_0_1_0_1; }

		//right=Assigned
		public Assignment getRightAssignment_0_1() { return cRightAssignment_0_1; }

		//Assigned
		public RuleCall getRightAssignedParserRuleCall_0_1_0() { return cRightAssignedParserRuleCall_0_1_0; }

		//LogicOp
		public RuleCall getLogicOpParserRuleCall_1() { return cLogicOpParserRuleCall_1; }
	}

	public class AssignedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assigned");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINDENTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cOUTDENTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cAssignedClassDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Assigned returns Expression:
		//	Expression | INDENT Expression OUTDENT | AssignedClassDeclaration;
		public ParserRule getRule() { return rule; }

		//Expression | INDENT Expression OUTDENT | AssignedClassDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//INDENT Expression OUTDENT
		public Group getGroup_1() { return cGroup_1; }

		//INDENT
		public RuleCall getINDENTTerminalRuleCall_1_0() { return cINDENTTerminalRuleCall_1_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }

		//OUTDENT
		public RuleCall getOUTDENTTerminalRuleCall_1_2() { return cOUTDENTTerminalRuleCall_1_2; }

		//AssignedClassDeclaration
		public RuleCall getAssignedClassDeclarationParserRuleCall_2() { return cAssignedClassDeclarationParserRuleCall_2; }
	}

	public class LogicOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareOpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorLOGICTerminalRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompareOpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//LogicOp returns Expression:
		//	CompareOp (=> ({BinaryExp.left=current} operator=LOGIC) right=CompareOp)*;
		public ParserRule getRule() { return rule; }

		//CompareOp (=> ({BinaryExp.left=current} operator=LOGIC) right=CompareOp)*
		public Group getGroup() { return cGroup; }

		//CompareOp
		public RuleCall getCompareOpParserRuleCall_0() { return cCompareOpParserRuleCall_0; }

		//(=> ({BinaryExp.left=current} operator=LOGIC) right=CompareOp)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExp.left=current} operator=LOGIC)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExp.left=current} operator=LOGIC
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExp.left=current}
		public Action getBinaryExpLeftAction_1_0_0_0() { return cBinaryExpLeftAction_1_0_0_0; }

		//operator=LOGIC
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//LOGIC
		public RuleCall getOperatorLOGICTerminalRuleCall_1_0_0_1_0() { return cOperatorLOGICTerminalRuleCall_1_0_0_1_0; }

		//right=CompareOp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//CompareOp
		public RuleCall getRightCompareOpParserRuleCall_1_1_0() { return cRightCompareOpParserRuleCall_1_1_0; }
	}

	public class CompareOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationOpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorCOMPARETerminalRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRelationOpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CompareOp returns Expression:
		//	RelationOp (=> ({BinaryExp.left=current} operator=COMPARE) right=RelationOp)*;
		public ParserRule getRule() { return rule; }

		//RelationOp (=> ({BinaryExp.left=current} operator=COMPARE) right=RelationOp)*
		public Group getGroup() { return cGroup; }

		//RelationOp
		public RuleCall getRelationOpParserRuleCall_0() { return cRelationOpParserRuleCall_0; }

		//(=> ({BinaryExp.left=current} operator=COMPARE) right=RelationOp)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExp.left=current} operator=COMPARE)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExp.left=current} operator=COMPARE
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExp.left=current}
		public Action getBinaryExpLeftAction_1_0_0_0() { return cBinaryExpLeftAction_1_0_0_0; }

		//operator=COMPARE
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//COMPARE
		public RuleCall getOperatorCOMPARETerminalRuleCall_1_0_0_1_0() { return cOperatorCOMPARETerminalRuleCall_1_0_0_1_0; }

		//right=RelationOp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//RelationOp
		public RuleCall getRightRelationOpParserRuleCall_1_1_0() { return cRightRelationOpParserRuleCall_1_1_0; }
	}

	public class RelationOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftOpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorRELATIONTerminalRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightShiftOpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationOp returns Expression:
		//	ShiftOp (=> ({BinaryExp.left=current} operator=RELATION) right=ShiftOp)*;
		public ParserRule getRule() { return rule; }

		//ShiftOp (=> ({BinaryExp.left=current} operator=RELATION) right=ShiftOp)*
		public Group getGroup() { return cGroup; }

		//ShiftOp
		public RuleCall getShiftOpParserRuleCall_0() { return cShiftOpParserRuleCall_0; }

		//(=> ({BinaryExp.left=current} operator=RELATION) right=ShiftOp)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExp.left=current} operator=RELATION)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExp.left=current} operator=RELATION
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExp.left=current}
		public Action getBinaryExpLeftAction_1_0_0_0() { return cBinaryExpLeftAction_1_0_0_0; }

		//operator=RELATION
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//RELATION
		public RuleCall getOperatorRELATIONTerminalRuleCall_1_0_0_1_0() { return cOperatorRELATIONTerminalRuleCall_1_0_0_1_0; }

		//right=ShiftOp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ShiftOp
		public RuleCall getRightShiftOpParserRuleCall_1_1_0() { return cRightShiftOpParserRuleCall_1_1_0; }
	}

	public class ShiftOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveOpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorSHIFTTerminalRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditiveOpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ShiftOp returns Expression:
		//	AdditiveOp (=> ({BinaryExp.left=current} operator=SHIFT) right=AdditiveOp)*;
		public ParserRule getRule() { return rule; }

		//AdditiveOp (=> ({BinaryExp.left=current} operator=SHIFT) right=AdditiveOp)*
		public Group getGroup() { return cGroup; }

		//AdditiveOp
		public RuleCall getAdditiveOpParserRuleCall_0() { return cAdditiveOpParserRuleCall_0; }

		//(=> ({BinaryExp.left=current} operator=SHIFT) right=AdditiveOp)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExp.left=current} operator=SHIFT)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExp.left=current} operator=SHIFT
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExp.left=current}
		public Action getBinaryExpLeftAction_1_0_0_0() { return cBinaryExpLeftAction_1_0_0_0; }

		//operator=SHIFT
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//SHIFT
		public RuleCall getOperatorSHIFTTerminalRuleCall_1_0_0_1_0() { return cOperatorSHIFTTerminalRuleCall_1_0_0_1_0; }

		//right=AdditiveOp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AdditiveOp
		public RuleCall getRightAdditiveOpParserRuleCall_1_1_0() { return cRightAdditiveOpParserRuleCall_1_1_0; }
	}

	public class AdditiveOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMathOpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0_0_1_0 = (Alternatives)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cOperatorPLUSTerminalRuleCall_1_0_0_1_0_0 = (RuleCall)cOperatorAlternatives_1_0_0_1_0.eContents().get(0);
		private final RuleCall cOperatorMINUSTerminalRuleCall_1_0_0_1_0_1 = (RuleCall)cOperatorAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMathOpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AdditiveOp returns Expression:
		//	MathOp (=> ({BinaryExp.left=current} operator=(PLUS | MINUS)) right=MathOp)*;
		public ParserRule getRule() { return rule; }

		//MathOp (=> ({BinaryExp.left=current} operator=(PLUS | MINUS)) right=MathOp)*
		public Group getGroup() { return cGroup; }

		//MathOp
		public RuleCall getMathOpParserRuleCall_0() { return cMathOpParserRuleCall_0; }

		//(=> ({BinaryExp.left=current} operator=(PLUS | MINUS)) right=MathOp)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExp.left=current} operator=(PLUS | MINUS))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExp.left=current} operator=(PLUS | MINUS)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExp.left=current}
		public Action getBinaryExpLeftAction_1_0_0_0() { return cBinaryExpLeftAction_1_0_0_0; }

		//operator=(PLUS | MINUS)
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//PLUS | MINUS
		public Alternatives getOperatorAlternatives_1_0_0_1_0() { return cOperatorAlternatives_1_0_0_1_0; }

		//PLUS
		public RuleCall getOperatorPLUSTerminalRuleCall_1_0_0_1_0_0() { return cOperatorPLUSTerminalRuleCall_1_0_0_1_0_0; }

		//MINUS
		public RuleCall getOperatorMINUSTerminalRuleCall_1_0_0_1_0_1() { return cOperatorMINUSTerminalRuleCall_1_0_0_1_0_1; }

		//right=MathOp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MathOp
		public RuleCall getRightMathOpParserRuleCall_1_1_0() { return cRightMathOpParserRuleCall_1_1_0; }
	}

	public class MathOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExpLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorMATHTerminalRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryOpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MathOp returns Expression:
		//	UnaryOp (=> ({BinaryExp.left=current} operator=MATH) right=UnaryOp)*;
		public ParserRule getRule() { return rule; }

		//UnaryOp (=> ({BinaryExp.left=current} operator=MATH) right=UnaryOp)*
		public Group getGroup() { return cGroup; }

		//UnaryOp
		public RuleCall getUnaryOpParserRuleCall_0() { return cUnaryOpParserRuleCall_0; }

		//(=> ({BinaryExp.left=current} operator=MATH) right=UnaryOp)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExp.left=current} operator=MATH)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExp.left=current} operator=MATH
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExp.left=current}
		public Action getBinaryExpLeftAction_1_0_0_0() { return cBinaryExpLeftAction_1_0_0_0; }

		//operator=MATH
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//MATH
		public RuleCall getOperatorMATHTerminalRuleCall_1_0_0_1_0() { return cOperatorMATHTerminalRuleCall_1_0_0_1_0; }

		//right=UnaryOp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryOp
		public RuleCall getRightUnaryOpParserRuleCall_1_1_0() { return cRightUnaryOpParserRuleCall_1_1_0; }
	}

	public class UnaryOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cUNARYTerminalRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cPLUSTerminalRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cMINUSTerminalRuleCall_0_0_2 = (RuleCall)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cPLUS_PLUSTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cMINUS_MINUSTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cApplicationParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cQUESTIONTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//UnaryOp returns Expression:
		//	(UNARY | PLUS | MINUS) Expression | (PLUS_PLUS | MINUS_MINUS) Variable | // FIXME: postfix increment
		//	Application QUESTION?;
		public ParserRule getRule() { return rule; }

		//(UNARY | PLUS | MINUS) Expression | (PLUS_PLUS | MINUS_MINUS) Variable | // FIXME: postfix increment
		//Application QUESTION?
		public Alternatives getAlternatives() { return cAlternatives; }

		//(UNARY | PLUS | MINUS) Expression
		public Group getGroup_0() { return cGroup_0; }

		//UNARY | PLUS | MINUS
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//UNARY
		public RuleCall getUNARYTerminalRuleCall_0_0_0() { return cUNARYTerminalRuleCall_0_0_0; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_0_1() { return cPLUSTerminalRuleCall_0_0_1; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0_0_2() { return cMINUSTerminalRuleCall_0_0_2; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//(PLUS_PLUS | MINUS_MINUS) Variable
		public Group getGroup_1() { return cGroup_1; }

		//PLUS_PLUS | MINUS_MINUS
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//PLUS_PLUS
		public RuleCall getPLUS_PLUSTerminalRuleCall_1_0_0() { return cPLUS_PLUSTerminalRuleCall_1_0_0; }

		//MINUS_MINUS
		public RuleCall getMINUS_MINUSTerminalRuleCall_1_0_1() { return cMINUS_MINUSTerminalRuleCall_1_0_1; }

		//Variable
		public RuleCall getVariableParserRuleCall_1_1() { return cVariableParserRuleCall_1_1; }

		//// FIXME: postfix increment
		//Application QUESTION?
		public Group getGroup_2() { return cGroup_2; }

		//// FIXME: postfix increment
		//Application
		public RuleCall getApplicationParserRuleCall_2_0() { return cApplicationParserRuleCall_2_0; }

		//QUESTION?
		public RuleCall getQUESTIONTerminalRuleCall_2_1() { return cQUESTIONTerminalRuleCall_2_1; }
	}

	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Application");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSuperCallAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cSUPERTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final RuleCall cCALL_STARTTerminalRuleCall_0_1_1_0 = (RuleCall)cGroup_0_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cArgsArgListParserRuleCall_0_1_1_1_0 = (RuleCall)cArgsAssignment_0_1_1_1.eContents().get(0);
		private final RuleCall cCALL_ENDTerminalRuleCall_0_1_1_2 = (RuleCall)cGroup_0_1_1.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValuePrimaryExpressionParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFeaturesFeatureCallParserRuleCall_1_1_0 = (RuleCall)cFeaturesAssignment_1_1.eContents().get(0);
		
		//// Nested function calls and property accesses -- I couldn't come up with a better name
		//Application:
		//	{SuperCall} (SUPER (CALL_START args=ArgList CALL_END)?) | value=PrimaryExpression features+=FeatureCall*;
		public ParserRule getRule() { return rule; }

		//{SuperCall} (SUPER (CALL_START args=ArgList CALL_END)?) | value=PrimaryExpression features+=FeatureCall*
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SuperCall} (SUPER (CALL_START args=ArgList CALL_END)?)
		public Group getGroup_0() { return cGroup_0; }

		//{SuperCall}
		public Action getSuperCallAction_0_0() { return cSuperCallAction_0_0; }

		//SUPER (CALL_START args=ArgList CALL_END)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//SUPER
		public RuleCall getSUPERTerminalRuleCall_0_1_0() { return cSUPERTerminalRuleCall_0_1_0; }

		//(CALL_START args=ArgList CALL_END)?
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//CALL_START
		public RuleCall getCALL_STARTTerminalRuleCall_0_1_1_0() { return cCALL_STARTTerminalRuleCall_0_1_1_0; }

		//args=ArgList
		public Assignment getArgsAssignment_0_1_1_1() { return cArgsAssignment_0_1_1_1; }

		//ArgList
		public RuleCall getArgsArgListParserRuleCall_0_1_1_1_0() { return cArgsArgListParserRuleCall_0_1_1_1_0; }

		//CALL_END
		public RuleCall getCALL_ENDTerminalRuleCall_0_1_1_2() { return cCALL_ENDTerminalRuleCall_0_1_1_2; }

		//value=PrimaryExpression features+=FeatureCall*
		public Group getGroup_1() { return cGroup_1; }

		//value=PrimaryExpression
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//PrimaryExpression
		public RuleCall getValuePrimaryExpressionParserRuleCall_1_0_0() { return cValuePrimaryExpressionParserRuleCall_1_0_0; }

		//features+=FeatureCall*
		public Assignment getFeaturesAssignment_1_1() { return cFeaturesAssignment_1_1; }

		//FeatureCall
		public RuleCall getFeaturesFeatureCallParserRuleCall_1_1_0() { return cFeaturesFeatureCallParserRuleCall_1_1_0; }
	}

	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyAccessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FeatureCall:
		//	FunctionCall | PropertyAccess;
		public ParserRule getRule() { return rule; }

		//FunctionCall | PropertyAccess
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_0() { return cFunctionCallParserRuleCall_0; }

		//PropertyAccess
		public RuleCall getPropertyAccessParserRuleCall_1() { return cPropertyAccessParserRuleCall_1; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cFUNC_EXISTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cCALL_STARTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsArgListParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final RuleCall cCALL_ENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//FunctionCall:
		//	{FunctionCall} FUNC_EXIST? CALL_START args=ArgList CALL_END;
		public ParserRule getRule() { return rule; }

		//{FunctionCall} FUNC_EXIST? CALL_START args=ArgList CALL_END
		public Group getGroup() { return cGroup; }

		//{FunctionCall}
		public Action getFunctionCallAction_0() { return cFunctionCallAction_0; }

		//FUNC_EXIST?
		public RuleCall getFUNC_EXISTTerminalRuleCall_1() { return cFUNC_EXISTTerminalRuleCall_1; }

		//CALL_START
		public RuleCall getCALL_STARTTerminalRuleCall_2() { return cCALL_STARTTerminalRuleCall_2; }

		//args=ArgList
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }

		//ArgList
		public RuleCall getArgsArgListParserRuleCall_3_0() { return cArgsArgListParserRuleCall_3_0; }

		//CALL_END
		public RuleCall getCALL_ENDTerminalRuleCall_4() { return cCALL_ENDTerminalRuleCall_4; }
	}

	public class PropertyAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyAccess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedPropertyAccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexedPropertyAccessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PropertyAccess:
		//	NamedPropertyAccess | IndexedPropertyAccess;
		public ParserRule getRule() { return rule; }

		//NamedPropertyAccess | IndexedPropertyAccess
		public Alternatives getAlternatives() { return cAlternatives; }

		//NamedPropertyAccess
		public RuleCall getNamedPropertyAccessParserRuleCall_0() { return cNamedPropertyAccessParserRuleCall_0; }

		//IndexedPropertyAccess
		public RuleCall getIndexedPropertyAccessParserRuleCall_1() { return cIndexedPropertyAccessParserRuleCall_1; }
	}

	public class ThisPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThisProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAT_SIGILTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIdParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ThisProperty:
		//	AT_SIGIL Id;
		public ParserRule getRule() { return rule; }

		//AT_SIGIL Id
		public Group getGroup() { return cGroup; }

		//AT_SIGIL
		public RuleCall getAT_SIGILTerminalRuleCall_0() { return cAT_SIGILTerminalRuleCall_0; }

		//Id
		public RuleCall getIdParserRuleCall_1() { return cIdParserRuleCall_1; }
	}

	public class NamedPropertyAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedPropertyAccess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAccessorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cAccessorAlternatives_0_0_0 = (Alternatives)cAccessorAssignment_0_0.eContents().get(0);
		private final RuleCall cAccessorDOTTerminalRuleCall_0_0_0_0 = (RuleCall)cAccessorAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cAccessorQUESTION_DOTTerminalRuleCall_0_0_0_1 = (RuleCall)cAccessorAlternatives_0_0_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIdParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAccessorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAccessorDOUBLE_COLONTerminalRuleCall_1_0_0 = (RuleCall)cAccessorAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//NamedPropertyAccess:
		//	accessor=(DOT | QUESTION_DOT) name=Id | accessor=DOUBLE_COLON name=Id?;
		public ParserRule getRule() { return rule; }

		//accessor=(DOT | QUESTION_DOT) name=Id | accessor=DOUBLE_COLON name=Id?
		public Alternatives getAlternatives() { return cAlternatives; }

		//accessor=(DOT | QUESTION_DOT) name=Id
		public Group getGroup_0() { return cGroup_0; }

		//accessor=(DOT | QUESTION_DOT)
		public Assignment getAccessorAssignment_0_0() { return cAccessorAssignment_0_0; }

		//DOT | QUESTION_DOT
		public Alternatives getAccessorAlternatives_0_0_0() { return cAccessorAlternatives_0_0_0; }

		//DOT
		public RuleCall getAccessorDOTTerminalRuleCall_0_0_0_0() { return cAccessorDOTTerminalRuleCall_0_0_0_0; }

		//QUESTION_DOT
		public RuleCall getAccessorQUESTION_DOTTerminalRuleCall_0_0_0_1() { return cAccessorQUESTION_DOTTerminalRuleCall_0_0_0_1; }

		//name=Id
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//Id
		public RuleCall getNameIdParserRuleCall_0_1_0() { return cNameIdParserRuleCall_0_1_0; }

		//accessor=DOUBLE_COLON name=Id?
		public Group getGroup_1() { return cGroup_1; }

		//accessor=DOUBLE_COLON
		public Assignment getAccessorAssignment_1_0() { return cAccessorAssignment_1_0; }

		//DOUBLE_COLON
		public RuleCall getAccessorDOUBLE_COLONTerminalRuleCall_1_0_0() { return cAccessorDOUBLE_COLONTerminalRuleCall_1_0_0; }

		//name=Id?
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Id
		public RuleCall getNameIdParserRuleCall_1_1_0() { return cNameIdParserRuleCall_1_1_0; }
	}

	public class IndexedPropertyAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexedPropertyAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINDEX_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexIndexParserRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final RuleCall cINDEX_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//IndexedPropertyAccess:
		//	INDEX_START index=Index INDEX_END;
		public ParserRule getRule() { return rule; }

		//INDEX_START index=Index INDEX_END
		public Group getGroup() { return cGroup; }

		//INDEX_START
		public RuleCall getINDEX_STARTTerminalRuleCall_0() { return cINDEX_STARTTerminalRuleCall_0; }

		//index=Index
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }

		//Index
		public RuleCall getIndexIndexParserRuleCall_1_0() { return cIndexIndexParserRuleCall_1_0; }

		//INDEX_END
		public RuleCall getINDEX_ENDTerminalRuleCall_2() { return cINDEX_ENDTerminalRuleCall_2; }
	}

	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Index");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDotsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cDotsAlternatives_0_0_0 = (Alternatives)cDotsAssignment_0_0.eContents().get(0);
		private final RuleCall cDotsDOT_DOTTerminalRuleCall_0_0_0_0 = (RuleCall)cDotsAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cDotsELLIPSISTerminalRuleCall_0_0_0_1 = (RuleCall)cDotsAlternatives_0_0_0.eContents().get(1);
		private final Assignment cEndAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cEndExpressionParserRuleCall_0_1_0 = (RuleCall)cEndAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cStartAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cStartExpressionParserRuleCall_1_0_0_0_0 = (RuleCall)cStartAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cDotsAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cDotsAlternatives_1_0_0_1_0 = (Alternatives)cDotsAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cDotsDOT_DOTTerminalRuleCall_1_0_0_1_0_0 = (RuleCall)cDotsAlternatives_1_0_0_1_0.eContents().get(0);
		private final RuleCall cDotsELLIPSISTerminalRuleCall_1_0_0_1_0_1 = (RuleCall)cDotsAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cEndAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEndExpressionParserRuleCall_1_1_0 = (RuleCall)cEndAssignment_1_1.eContents().get(0);
		private final Assignment cExpAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Index:
		//	=> dots=(DOT_DOT | ELLIPSIS) end=Expression | => (start=Expression dots=(DOT_DOT | ELLIPSIS)) end=Expression? |
		//	exp=Expression;
		public ParserRule getRule() { return rule; }

		//=> dots=(DOT_DOT | ELLIPSIS) end=Expression | => (start=Expression dots=(DOT_DOT | ELLIPSIS)) end=Expression? |
		//exp=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> dots=(DOT_DOT | ELLIPSIS) end=Expression
		public Group getGroup_0() { return cGroup_0; }

		//=> dots=(DOT_DOT | ELLIPSIS)
		public Assignment getDotsAssignment_0_0() { return cDotsAssignment_0_0; }

		//DOT_DOT | ELLIPSIS
		public Alternatives getDotsAlternatives_0_0_0() { return cDotsAlternatives_0_0_0; }

		//DOT_DOT
		public RuleCall getDotsDOT_DOTTerminalRuleCall_0_0_0_0() { return cDotsDOT_DOTTerminalRuleCall_0_0_0_0; }

		//ELLIPSIS
		public RuleCall getDotsELLIPSISTerminalRuleCall_0_0_0_1() { return cDotsELLIPSISTerminalRuleCall_0_0_0_1; }

		//end=Expression
		public Assignment getEndAssignment_0_1() { return cEndAssignment_0_1; }

		//Expression
		public RuleCall getEndExpressionParserRuleCall_0_1_0() { return cEndExpressionParserRuleCall_0_1_0; }

		//=> (start=Expression dots=(DOT_DOT | ELLIPSIS)) end=Expression?
		public Group getGroup_1() { return cGroup_1; }

		//=> (start=Expression dots=(DOT_DOT | ELLIPSIS))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//start=Expression dots=(DOT_DOT | ELLIPSIS)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//start=Expression
		public Assignment getStartAssignment_1_0_0_0() { return cStartAssignment_1_0_0_0; }

		//Expression
		public RuleCall getStartExpressionParserRuleCall_1_0_0_0_0() { return cStartExpressionParserRuleCall_1_0_0_0_0; }

		//dots=(DOT_DOT | ELLIPSIS)
		public Assignment getDotsAssignment_1_0_0_1() { return cDotsAssignment_1_0_0_1; }

		//DOT_DOT | ELLIPSIS
		public Alternatives getDotsAlternatives_1_0_0_1_0() { return cDotsAlternatives_1_0_0_1_0; }

		//DOT_DOT
		public RuleCall getDotsDOT_DOTTerminalRuleCall_1_0_0_1_0_0() { return cDotsDOT_DOTTerminalRuleCall_1_0_0_1_0_0; }

		//ELLIPSIS
		public RuleCall getDotsELLIPSISTerminalRuleCall_1_0_0_1_0_1() { return cDotsELLIPSISTerminalRuleCall_1_0_0_1_0_1; }

		//end=Expression?
		public Assignment getEndAssignment_1_1() { return cEndAssignment_1_1; }

		//Expression
		public RuleCall getEndExpressionParserRuleCall_1_1_0() { return cEndExpressionParserRuleCall_1_1_0; }

		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParentheticalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRangeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cArrayParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDictionaryParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLambdaParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cThisPropertyParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cThisAloneAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final RuleCall cTHISTerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cForAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final RuleCall cFORTerminalRuleCall_9_1_0 = (RuleCall)cGroup_9_1.eContents().get(0);
		private final Assignment cLoopAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cLoopForBodyParserRuleCall_9_1_1_0 = (RuleCall)cLoopAssignment_9_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_9_1_2 = (Assignment)cGroup_9_1.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_9_1_2_0 = (RuleCall)cBodyAssignment_9_1_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cWhileAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final RuleCall cWHILETerminalRuleCall_10_1_0 = (RuleCall)cGroup_10_1.eContents().get(0);
		private final Assignment cLoopAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final RuleCall cLoopExpressionParserRuleCall_10_1_1_0 = (RuleCall)cLoopAssignment_10_1_1.eContents().get(0);
		private final Group cGroup_10_1_2 = (Group)cGroup_10_1.eContents().get(2);
		private final RuleCall cWHENTerminalRuleCall_10_1_2_0 = (RuleCall)cGroup_10_1_2.eContents().get(0);
		private final Assignment cWhenAssignment_10_1_2_1 = (Assignment)cGroup_10_1_2.eContents().get(1);
		private final RuleCall cWhenExpressionParserRuleCall_10_1_2_1_0 = (RuleCall)cWhenAssignment_10_1_2_1.eContents().get(0);
		private final Assignment cBodyAssignment_10_1_3 = (Assignment)cGroup_10_1.eContents().get(3);
		private final RuleCall cBodyBlockParserRuleCall_10_1_3_0 = (RuleCall)cBodyAssignment_10_1_3.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cUntilAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final RuleCall cUNTILTerminalRuleCall_11_1_0 = (RuleCall)cGroup_11_1.eContents().get(0);
		private final Assignment cLoopAssignment_11_1_1 = (Assignment)cGroup_11_1.eContents().get(1);
		private final RuleCall cLoopExpressionParserRuleCall_11_1_1_0 = (RuleCall)cLoopAssignment_11_1_1.eContents().get(0);
		private final Group cGroup_11_1_2 = (Group)cGroup_11_1.eContents().get(2);
		private final RuleCall cWHENTerminalRuleCall_11_1_2_0 = (RuleCall)cGroup_11_1_2.eContents().get(0);
		private final Assignment cWhenAssignment_11_1_2_1 = (Assignment)cGroup_11_1_2.eContents().get(1);
		private final RuleCall cWhenExpressionParserRuleCall_11_1_2_1_0 = (RuleCall)cWhenAssignment_11_1_2_1.eContents().get(0);
		private final Assignment cBodyAssignment_11_1_3 = (Assignment)cGroup_11_1.eContents().get(3);
		private final RuleCall cBodyBlockParserRuleCall_11_1_3_0 = (RuleCall)cBodyAssignment_11_1_3.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cLoopAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Group cGroup_12_1 = (Group)cGroup_12.eContents().get(1);
		private final RuleCall cLOOPTerminalRuleCall_12_1_0 = (RuleCall)cGroup_12_1.eContents().get(0);
		private final Assignment cBodyAssignment_12_1_1 = (Assignment)cGroup_12_1.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_12_1_1_0 = (RuleCall)cBodyAssignment_12_1_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cTryCatchAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Group cGroup_13_1 = (Group)cGroup_13.eContents().get(1);
		private final RuleCall cTRYTerminalRuleCall_13_1_0 = (RuleCall)cGroup_13_1.eContents().get(0);
		private final Assignment cBodyAssignment_13_1_1 = (Assignment)cGroup_13_1.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_13_1_1_0 = (RuleCall)cBodyAssignment_13_1_1.eContents().get(0);
		private final Alternatives cAlternatives_13_1_2 = (Alternatives)cGroup_13_1.eContents().get(2);
		private final Group cGroup_13_1_2_0 = (Group)cAlternatives_13_1_2.eContents().get(0);
		private final RuleCall cCATCHTerminalRuleCall_13_1_2_0_0 = (RuleCall)cGroup_13_1_2_0.eContents().get(0);
		private final Assignment cExceptionAssignment_13_1_2_0_1 = (Assignment)cGroup_13_1_2_0.eContents().get(1);
		private final RuleCall cExceptionIdParserRuleCall_13_1_2_0_1_0 = (RuleCall)cExceptionAssignment_13_1_2_0_1.eContents().get(0);
		private final Assignment cCatchBlockAssignment_13_1_2_0_2 = (Assignment)cGroup_13_1_2_0.eContents().get(2);
		private final RuleCall cCatchBlockBlockParserRuleCall_13_1_2_0_2_0 = (RuleCall)cCatchBlockAssignment_13_1_2_0_2.eContents().get(0);
		private final Group cGroup_13_1_2_0_3 = (Group)cGroup_13_1_2_0.eContents().get(3);
		private final RuleCall cFINALLYTerminalRuleCall_13_1_2_0_3_0 = (RuleCall)cGroup_13_1_2_0_3.eContents().get(0);
		private final Assignment cFinallyBlockAssignment_13_1_2_0_3_1 = (Assignment)cGroup_13_1_2_0_3.eContents().get(1);
		private final RuleCall cFinallyBlockBlockParserRuleCall_13_1_2_0_3_1_0 = (RuleCall)cFinallyBlockAssignment_13_1_2_0_3_1.eContents().get(0);
		private final Group cGroup_13_1_2_1 = (Group)cAlternatives_13_1_2.eContents().get(1);
		private final RuleCall cFINALLYTerminalRuleCall_13_1_2_1_0 = (RuleCall)cGroup_13_1_2_1.eContents().get(0);
		private final Assignment cFinallyBlockAssignment_13_1_2_1_1 = (Assignment)cGroup_13_1_2_1.eContents().get(1);
		private final RuleCall cFinallyBlockBlockParserRuleCall_13_1_2_1_1_0 = (RuleCall)cFinallyBlockAssignment_13_1_2_1_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cSwitchAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Group cGroup_14_1 = (Group)cGroup_14.eContents().get(1);
		private final RuleCall cSWITCHTerminalRuleCall_14_1_0 = (RuleCall)cGroup_14_1.eContents().get(0);
		private final Assignment cExpAssignment_14_1_1 = (Assignment)cGroup_14_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_14_1_1_0 = (RuleCall)cExpAssignment_14_1_1.eContents().get(0);
		private final RuleCall cINDENTTerminalRuleCall_14_1_2 = (RuleCall)cGroup_14_1.eContents().get(2);
		private final Assignment cCasesAssignment_14_1_3 = (Assignment)cGroup_14_1.eContents().get(3);
		private final RuleCall cCasesCaseParserRuleCall_14_1_3_0 = (RuleCall)cCasesAssignment_14_1_3.eContents().get(0);
		private final Group cGroup_14_1_4 = (Group)cGroup_14_1.eContents().get(4);
		private final RuleCall cELSETerminalRuleCall_14_1_4_0 = (RuleCall)cGroup_14_1_4.eContents().get(0);
		private final Assignment cElseBlockAssignment_14_1_4_1 = (Assignment)cGroup_14_1_4.eContents().get(1);
		private final RuleCall cElseBlockBlockParserRuleCall_14_1_4_1_0 = (RuleCall)cElseBlockAssignment_14_1_4_1.eContents().get(0);
		private final RuleCall cOUTDENTTerminalRuleCall_14_1_5 = (RuleCall)cGroup_14_1.eContents().get(5);
		private final RuleCall cIdRefParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		
		//// Try Range before Array
		//PrimaryExpression:
		//	IfExp | Parenthetical | Literal | Range | Array | Dictionary | Lambda | ThisProperty | {ThisAlone} THIS | {For} (FOR
		//	loop=ForBody body=Block) | {While} (WHILE loop=Expression (WHEN when=Expression)? body=Block) | {Until} (UNTIL
		//	loop=Expression (WHEN when=Expression)? body=Block) | {Loop} (LOOP body=Block) | {TryCatch} (TRY body=Block (CATCH
		//	exception=Id catchBlock=Block (FINALLY finallyBlock=Block)? | FINALLY finallyBlock=Block)?) | {Switch} (SWITCH
		//	exp=Expression? INDENT cases+=Case* (ELSE elseBlock=Block)? OUTDENT) | IdRef;
		public ParserRule getRule() { return rule; }

		//IfExp | Parenthetical | Literal | Range | Array | Dictionary | Lambda | ThisProperty | {ThisAlone} THIS | {For} (FOR
		//loop=ForBody body=Block) | {While} (WHILE loop=Expression (WHEN when=Expression)? body=Block) | {Until} (UNTIL
		//loop=Expression (WHEN when=Expression)? body=Block) | {Loop} (LOOP body=Block) | {TryCatch} (TRY body=Block (CATCH
		//exception=Id catchBlock=Block (FINALLY finallyBlock=Block)? | FINALLY finallyBlock=Block)?) | {Switch} (SWITCH
		//exp=Expression? INDENT cases+=Case* (ELSE elseBlock=Block)? OUTDENT) | IdRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfExp
		public RuleCall getIfExpParserRuleCall_0() { return cIfExpParserRuleCall_0; }

		//Parenthetical
		public RuleCall getParentheticalParserRuleCall_1() { return cParentheticalParserRuleCall_1; }

		//Literal
		public RuleCall getLiteralParserRuleCall_2() { return cLiteralParserRuleCall_2; }

		//Range
		public RuleCall getRangeParserRuleCall_3() { return cRangeParserRuleCall_3; }

		//Array
		public RuleCall getArrayParserRuleCall_4() { return cArrayParserRuleCall_4; }

		//Dictionary
		public RuleCall getDictionaryParserRuleCall_5() { return cDictionaryParserRuleCall_5; }

		//Lambda
		public RuleCall getLambdaParserRuleCall_6() { return cLambdaParserRuleCall_6; }

		//ThisProperty
		public RuleCall getThisPropertyParserRuleCall_7() { return cThisPropertyParserRuleCall_7; }

		//{ThisAlone} THIS
		public Group getGroup_8() { return cGroup_8; }

		//{ThisAlone}
		public Action getThisAloneAction_8_0() { return cThisAloneAction_8_0; }

		//THIS
		public RuleCall getTHISTerminalRuleCall_8_1() { return cTHISTerminalRuleCall_8_1; }

		//{For} (FOR loop=ForBody body=Block)
		public Group getGroup_9() { return cGroup_9; }

		//{For}
		public Action getForAction_9_0() { return cForAction_9_0; }

		//FOR loop=ForBody body=Block
		public Group getGroup_9_1() { return cGroup_9_1; }

		//FOR
		public RuleCall getFORTerminalRuleCall_9_1_0() { return cFORTerminalRuleCall_9_1_0; }

		//loop=ForBody
		public Assignment getLoopAssignment_9_1_1() { return cLoopAssignment_9_1_1; }

		//ForBody
		public RuleCall getLoopForBodyParserRuleCall_9_1_1_0() { return cLoopForBodyParserRuleCall_9_1_1_0; }

		//body=Block
		public Assignment getBodyAssignment_9_1_2() { return cBodyAssignment_9_1_2; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_9_1_2_0() { return cBodyBlockParserRuleCall_9_1_2_0; }

		//{While} (WHILE loop=Expression (WHEN when=Expression)? body=Block)
		public Group getGroup_10() { return cGroup_10; }

		//{While}
		public Action getWhileAction_10_0() { return cWhileAction_10_0; }

		//WHILE loop=Expression (WHEN when=Expression)? body=Block
		public Group getGroup_10_1() { return cGroup_10_1; }

		//WHILE
		public RuleCall getWHILETerminalRuleCall_10_1_0() { return cWHILETerminalRuleCall_10_1_0; }

		//loop=Expression
		public Assignment getLoopAssignment_10_1_1() { return cLoopAssignment_10_1_1; }

		//Expression
		public RuleCall getLoopExpressionParserRuleCall_10_1_1_0() { return cLoopExpressionParserRuleCall_10_1_1_0; }

		//(WHEN when=Expression)?
		public Group getGroup_10_1_2() { return cGroup_10_1_2; }

		//WHEN
		public RuleCall getWHENTerminalRuleCall_10_1_2_0() { return cWHENTerminalRuleCall_10_1_2_0; }

		//when=Expression
		public Assignment getWhenAssignment_10_1_2_1() { return cWhenAssignment_10_1_2_1; }

		//Expression
		public RuleCall getWhenExpressionParserRuleCall_10_1_2_1_0() { return cWhenExpressionParserRuleCall_10_1_2_1_0; }

		//body=Block
		public Assignment getBodyAssignment_10_1_3() { return cBodyAssignment_10_1_3; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_10_1_3_0() { return cBodyBlockParserRuleCall_10_1_3_0; }

		//{Until} (UNTIL loop=Expression (WHEN when=Expression)? body=Block)
		public Group getGroup_11() { return cGroup_11; }

		//{Until}
		public Action getUntilAction_11_0() { return cUntilAction_11_0; }

		//UNTIL loop=Expression (WHEN when=Expression)? body=Block
		public Group getGroup_11_1() { return cGroup_11_1; }

		//UNTIL
		public RuleCall getUNTILTerminalRuleCall_11_1_0() { return cUNTILTerminalRuleCall_11_1_0; }

		//loop=Expression
		public Assignment getLoopAssignment_11_1_1() { return cLoopAssignment_11_1_1; }

		//Expression
		public RuleCall getLoopExpressionParserRuleCall_11_1_1_0() { return cLoopExpressionParserRuleCall_11_1_1_0; }

		//(WHEN when=Expression)?
		public Group getGroup_11_1_2() { return cGroup_11_1_2; }

		//WHEN
		public RuleCall getWHENTerminalRuleCall_11_1_2_0() { return cWHENTerminalRuleCall_11_1_2_0; }

		//when=Expression
		public Assignment getWhenAssignment_11_1_2_1() { return cWhenAssignment_11_1_2_1; }

		//Expression
		public RuleCall getWhenExpressionParserRuleCall_11_1_2_1_0() { return cWhenExpressionParserRuleCall_11_1_2_1_0; }

		//body=Block
		public Assignment getBodyAssignment_11_1_3() { return cBodyAssignment_11_1_3; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_11_1_3_0() { return cBodyBlockParserRuleCall_11_1_3_0; }

		//{Loop} (LOOP body=Block)
		public Group getGroup_12() { return cGroup_12; }

		//{Loop}
		public Action getLoopAction_12_0() { return cLoopAction_12_0; }

		//LOOP body=Block
		public Group getGroup_12_1() { return cGroup_12_1; }

		//LOOP
		public RuleCall getLOOPTerminalRuleCall_12_1_0() { return cLOOPTerminalRuleCall_12_1_0; }

		//body=Block
		public Assignment getBodyAssignment_12_1_1() { return cBodyAssignment_12_1_1; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_12_1_1_0() { return cBodyBlockParserRuleCall_12_1_1_0; }

		//{TryCatch} (TRY body=Block (CATCH exception=Id catchBlock=Block (FINALLY finallyBlock=Block)? | FINALLY
		//finallyBlock=Block)?)
		public Group getGroup_13() { return cGroup_13; }

		//{TryCatch}
		public Action getTryCatchAction_13_0() { return cTryCatchAction_13_0; }

		//TRY body=Block (CATCH exception=Id catchBlock=Block (FINALLY finallyBlock=Block)? | FINALLY finallyBlock=Block)?
		public Group getGroup_13_1() { return cGroup_13_1; }

		//TRY
		public RuleCall getTRYTerminalRuleCall_13_1_0() { return cTRYTerminalRuleCall_13_1_0; }

		//body=Block
		public Assignment getBodyAssignment_13_1_1() { return cBodyAssignment_13_1_1; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_13_1_1_0() { return cBodyBlockParserRuleCall_13_1_1_0; }

		//(CATCH exception=Id catchBlock=Block (FINALLY finallyBlock=Block)? | FINALLY finallyBlock=Block)?
		public Alternatives getAlternatives_13_1_2() { return cAlternatives_13_1_2; }

		//CATCH exception=Id catchBlock=Block (FINALLY finallyBlock=Block)?
		public Group getGroup_13_1_2_0() { return cGroup_13_1_2_0; }

		//CATCH
		public RuleCall getCATCHTerminalRuleCall_13_1_2_0_0() { return cCATCHTerminalRuleCall_13_1_2_0_0; }

		//exception=Id
		public Assignment getExceptionAssignment_13_1_2_0_1() { return cExceptionAssignment_13_1_2_0_1; }

		//Id
		public RuleCall getExceptionIdParserRuleCall_13_1_2_0_1_0() { return cExceptionIdParserRuleCall_13_1_2_0_1_0; }

		//catchBlock=Block
		public Assignment getCatchBlockAssignment_13_1_2_0_2() { return cCatchBlockAssignment_13_1_2_0_2; }

		//Block
		public RuleCall getCatchBlockBlockParserRuleCall_13_1_2_0_2_0() { return cCatchBlockBlockParserRuleCall_13_1_2_0_2_0; }

		//(FINALLY finallyBlock=Block)?
		public Group getGroup_13_1_2_0_3() { return cGroup_13_1_2_0_3; }

		//FINALLY
		public RuleCall getFINALLYTerminalRuleCall_13_1_2_0_3_0() { return cFINALLYTerminalRuleCall_13_1_2_0_3_0; }

		//finallyBlock=Block
		public Assignment getFinallyBlockAssignment_13_1_2_0_3_1() { return cFinallyBlockAssignment_13_1_2_0_3_1; }

		//Block
		public RuleCall getFinallyBlockBlockParserRuleCall_13_1_2_0_3_1_0() { return cFinallyBlockBlockParserRuleCall_13_1_2_0_3_1_0; }

		//FINALLY finallyBlock=Block
		public Group getGroup_13_1_2_1() { return cGroup_13_1_2_1; }

		//FINALLY
		public RuleCall getFINALLYTerminalRuleCall_13_1_2_1_0() { return cFINALLYTerminalRuleCall_13_1_2_1_0; }

		//finallyBlock=Block
		public Assignment getFinallyBlockAssignment_13_1_2_1_1() { return cFinallyBlockAssignment_13_1_2_1_1; }

		//Block
		public RuleCall getFinallyBlockBlockParserRuleCall_13_1_2_1_1_0() { return cFinallyBlockBlockParserRuleCall_13_1_2_1_1_0; }

		//{Switch} (SWITCH exp=Expression? INDENT cases+=Case* (ELSE elseBlock=Block)? OUTDENT)
		public Group getGroup_14() { return cGroup_14; }

		//{Switch}
		public Action getSwitchAction_14_0() { return cSwitchAction_14_0; }

		//SWITCH exp=Expression? INDENT cases+=Case* (ELSE elseBlock=Block)? OUTDENT
		public Group getGroup_14_1() { return cGroup_14_1; }

		//SWITCH
		public RuleCall getSWITCHTerminalRuleCall_14_1_0() { return cSWITCHTerminalRuleCall_14_1_0; }

		//exp=Expression?
		public Assignment getExpAssignment_14_1_1() { return cExpAssignment_14_1_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_14_1_1_0() { return cExpExpressionParserRuleCall_14_1_1_0; }

		//INDENT
		public RuleCall getINDENTTerminalRuleCall_14_1_2() { return cINDENTTerminalRuleCall_14_1_2; }

		//cases+=Case*
		public Assignment getCasesAssignment_14_1_3() { return cCasesAssignment_14_1_3; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_14_1_3_0() { return cCasesCaseParserRuleCall_14_1_3_0; }

		//(ELSE elseBlock=Block)?
		public Group getGroup_14_1_4() { return cGroup_14_1_4; }

		//ELSE
		public RuleCall getELSETerminalRuleCall_14_1_4_0() { return cELSETerminalRuleCall_14_1_4_0; }

		//elseBlock=Block
		public Assignment getElseBlockAssignment_14_1_4_1() { return cElseBlockAssignment_14_1_4_1; }

		//Block
		public RuleCall getElseBlockBlockParserRuleCall_14_1_4_1_0() { return cElseBlockBlockParserRuleCall_14_1_4_1_0; }

		//OUTDENT
		public RuleCall getOUTDENTTerminalRuleCall_14_1_5() { return cOUTDENTTerminalRuleCall_14_1_5; }

		//IdRef
		public RuleCall getIdRefParserRuleCall_15() { return cIdRefParserRuleCall_15; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cINDENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cOUTDENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Block:
		//	{Block} INDENT Body? OUTDENT;
		public ParserRule getRule() { return rule; }

		//{Block} INDENT Body? OUTDENT
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//INDENT
		public RuleCall getINDENTTerminalRuleCall_1() { return cINDENTTerminalRuleCall_1; }

		//Body?
		public RuleCall getBodyParserRuleCall_2() { return cBodyParserRuleCall_2; }

		//OUTDENT
		public RuleCall getOUTDENTTerminalRuleCall_3() { return cOUTDENTTerminalRuleCall_3; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLEADING_WHENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cWhensAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWhensExpressionParserRuleCall_1_0 = (RuleCall)cWhensAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cWhensAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWhensExpressionParserRuleCall_2_1_0 = (RuleCall)cWhensAssignment_2_1.eContents().get(0);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenBlockParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final RuleCall cTERMINATORTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// a switch case (called When in coffeescript)
		//Case:
		//	LEADING_WHEN whens+=Expression (COMMA whens+=Expression)* then=Block TERMINATOR?;
		public ParserRule getRule() { return rule; }

		//LEADING_WHEN whens+=Expression (COMMA whens+=Expression)* then=Block TERMINATOR?
		public Group getGroup() { return cGroup; }

		//LEADING_WHEN
		public RuleCall getLEADING_WHENTerminalRuleCall_0() { return cLEADING_WHENTerminalRuleCall_0; }

		//whens+=Expression
		public Assignment getWhensAssignment_1() { return cWhensAssignment_1; }

		//Expression
		public RuleCall getWhensExpressionParserRuleCall_1_0() { return cWhensExpressionParserRuleCall_1_0; }

		//(COMMA whens+=Expression)*
		public Group getGroup_2() { return cGroup_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }

		//whens+=Expression
		public Assignment getWhensAssignment_2_1() { return cWhensAssignment_2_1; }

		//Expression
		public RuleCall getWhensExpressionParserRuleCall_2_1_0() { return cWhensExpressionParserRuleCall_2_1_0; }

		//then=Block
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//Block
		public RuleCall getThenBlockParserRuleCall_3_0() { return cThenBlockParserRuleCall_3_0; }

		//TERMINATOR?
		public RuleCall getTERMINATORTerminalRuleCall_4() { return cTERMINATORTerminalRuleCall_4; }
	}

	public class IfExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBlocksAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBlocksCondBlockParserRuleCall_0_0 = (RuleCall)cBlocksAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cELSETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cBlocksAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBlocksCondBlockParserRuleCall_1_1_0 = (RuleCall)cBlocksAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cELSETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cDefaultBlockAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefaultBlockBlockParserRuleCall_2_1_0 = (RuleCall)cDefaultBlockAssignment_2_1.eContents().get(0);
		
		//IfExp:
		//	blocks+=CondBlock (ELSE blocks+=CondBlock)* (ELSE defaultBlock=Block)?;
		public ParserRule getRule() { return rule; }

		//blocks+=CondBlock (ELSE blocks+=CondBlock)* (ELSE defaultBlock=Block)?
		public Group getGroup() { return cGroup; }

		//blocks+=CondBlock
		public Assignment getBlocksAssignment_0() { return cBlocksAssignment_0; }

		//CondBlock
		public RuleCall getBlocksCondBlockParserRuleCall_0_0() { return cBlocksCondBlockParserRuleCall_0_0; }

		//(ELSE blocks+=CondBlock)*
		public Group getGroup_1() { return cGroup_1; }

		//ELSE
		public RuleCall getELSETerminalRuleCall_1_0() { return cELSETerminalRuleCall_1_0; }

		//blocks+=CondBlock
		public Assignment getBlocksAssignment_1_1() { return cBlocksAssignment_1_1; }

		//CondBlock
		public RuleCall getBlocksCondBlockParserRuleCall_1_1_0() { return cBlocksCondBlockParserRuleCall_1_1_0; }

		//(ELSE defaultBlock=Block)?
		public Group getGroup_2() { return cGroup_2; }

		//ELSE
		public RuleCall getELSETerminalRuleCall_2_0() { return cELSETerminalRuleCall_2_0; }

		//defaultBlock=Block
		public Assignment getDefaultBlockAssignment_2_1() { return cDefaultBlockAssignment_2_1; }

		//Block
		public RuleCall getDefaultBlockBlockParserRuleCall_2_1_0() { return cDefaultBlockBlockParserRuleCall_2_1_0; }
	}

	public class CondBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CondBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorIFTerminalRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionBlockParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		
		//// IF can be 'if' or 'unless'
		//CondBlock:
		//	operator=IF condition=Expression action=Block;
		public ParserRule getRule() { return rule; }

		//operator=IF condition=Expression action=Block
		public Group getGroup() { return cGroup; }

		//operator=IF
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//IF
		public RuleCall getOperatorIFTerminalRuleCall_0_0() { return cOperatorIFTerminalRuleCall_0_0; }

		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//action=Block
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }

		//Block
		public RuleCall getActionBlockParserRuleCall_2_0() { return cActionBlockParserRuleCall_2_0; }
	}

	public class IdRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdRef");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValIdCrossReference_0 = (CrossReference)cValAssignment.eContents().get(0);
		private final RuleCall cValIdIDENTIFIERTerminalRuleCall_0_1 = (RuleCall)cValIdCrossReference_0.eContents().get(1);
		
		//IdRef:
		//	val=[Id|IDENTIFIER];
		public ParserRule getRule() { return rule; }

		//val=[Id|IDENTIFIER]
		public Assignment getValAssignment() { return cValAssignment; }

		//[Id|IDENTIFIER]
		public CrossReference getValIdCrossReference_0() { return cValIdCrossReference_0; }

		//IDENTIFIER
		public RuleCall getValIdIDENTIFIERTerminalRuleCall_0_1() { return cValIdIDENTIFIERTerminalRuleCall_0_1; }
	}

	public class IdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Id");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Id:
		//	name=IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//name=IDENTIFIER
		public Assignment getNameAssignment() { return cNameAssignment; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0() { return cNameIDENTIFIERTerminalRuleCall_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cGroup_0_0.eContents().get(0);
		private final RuleCall cIdRefParserRuleCall_0_0_0_0 = (RuleCall)cGroup_0_0_0.eContents().get(0);
		private final Assignment cAccessorAssignment_0_0_0_1 = (Assignment)cGroup_0_0_0.eContents().get(1);
		private final Alternatives cAccessorAlternatives_0_0_0_1_0 = (Alternatives)cAccessorAssignment_0_0_0_1.eContents().get(0);
		private final RuleCall cAccessorDOTTerminalRuleCall_0_0_0_1_0_0 = (RuleCall)cAccessorAlternatives_0_0_0_1_0.eContents().get(0);
		private final RuleCall cAccessorDOUBLE_COLONTerminalRuleCall_0_0_0_1_0_1 = (RuleCall)cAccessorAlternatives_0_0_0_1_0.eContents().get(1);
		private final RuleCall cAccessorQUESTION_DOTTerminalRuleCall_0_0_0_1_0_2 = (RuleCall)cAccessorAlternatives_0_0_0_1_0.eContents().get(2);
		private final Assignment cPropAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPropIdParserRuleCall_0_1_0 = (RuleCall)cPropAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final RuleCall cIdRefParserRuleCall_1_0_0_0 = (RuleCall)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cINDEX_STARTTerminalRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexIndexParserRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		private final RuleCall cINDEX_ENDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Property:
		//	=> (IdRef accessor=(DOT | DOUBLE_COLON | QUESTION_DOT)) prop=Id // FIXME: property is actually "Expression Accessor"
		//	| => (IdRef INDEX_START) index=Index INDEX_END;
		public ParserRule getRule() { return rule; }

		//=> (IdRef accessor=(DOT | DOUBLE_COLON | QUESTION_DOT)) prop=Id // FIXME: property is actually "Expression Accessor"
		//| => (IdRef INDEX_START) index=Index INDEX_END
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> (IdRef accessor=(DOT | DOUBLE_COLON | QUESTION_DOT)) prop=Id
		public Group getGroup_0() { return cGroup_0; }

		//=> (IdRef accessor=(DOT | DOUBLE_COLON | QUESTION_DOT))
		public Group getGroup_0_0() { return cGroup_0_0; }

		//IdRef accessor=(DOT | DOUBLE_COLON | QUESTION_DOT)
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//IdRef
		public RuleCall getIdRefParserRuleCall_0_0_0_0() { return cIdRefParserRuleCall_0_0_0_0; }

		//accessor=(DOT | DOUBLE_COLON | QUESTION_DOT)
		public Assignment getAccessorAssignment_0_0_0_1() { return cAccessorAssignment_0_0_0_1; }

		//DOT | DOUBLE_COLON | QUESTION_DOT
		public Alternatives getAccessorAlternatives_0_0_0_1_0() { return cAccessorAlternatives_0_0_0_1_0; }

		//DOT
		public RuleCall getAccessorDOTTerminalRuleCall_0_0_0_1_0_0() { return cAccessorDOTTerminalRuleCall_0_0_0_1_0_0; }

		//DOUBLE_COLON
		public RuleCall getAccessorDOUBLE_COLONTerminalRuleCall_0_0_0_1_0_1() { return cAccessorDOUBLE_COLONTerminalRuleCall_0_0_0_1_0_1; }

		//QUESTION_DOT
		public RuleCall getAccessorQUESTION_DOTTerminalRuleCall_0_0_0_1_0_2() { return cAccessorQUESTION_DOTTerminalRuleCall_0_0_0_1_0_2; }

		//prop=Id
		public Assignment getPropAssignment_0_1() { return cPropAssignment_0_1; }

		//Id
		public RuleCall getPropIdParserRuleCall_0_1_0() { return cPropIdParserRuleCall_0_1_0; }

		//=> (IdRef INDEX_START) index=Index INDEX_END
		public Group getGroup_1() { return cGroup_1; }

		//=> (IdRef INDEX_START)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//IdRef INDEX_START
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//IdRef
		public RuleCall getIdRefParserRuleCall_1_0_0_0() { return cIdRefParserRuleCall_1_0_0_0; }

		//INDEX_START
		public RuleCall getINDEX_STARTTerminalRuleCall_1_0_0_1() { return cINDEX_STARTTerminalRuleCall_1_0_0_1; }

		//index=Index
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }

		//Index
		public RuleCall getIndexIndexParserRuleCall_1_1_0() { return cIndexIndexParserRuleCall_1_1_0; }

		//INDEX_END
		public RuleCall getINDEX_ENDTerminalRuleCall_1_2() { return cINDEX_ENDTerminalRuleCall_1_2; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cAT_SIGILTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cTHISTerminalRuleCall_1_0_1_0 = (RuleCall)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1_0_1_1 = (RuleCall)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cIdParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cDOTTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cPropsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cPropsIdParserRuleCall_1_2_1_0 = (RuleCall)cPropsAssignment_1_2_1.eContents().get(0);
		private final RuleCall cPropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Variable:
		//	Id | (AT_SIGIL | THIS DOT) Id (DOT props+=Id)* | Property;
		public ParserRule getRule() { return rule; }

		//Id | (AT_SIGIL | THIS DOT) Id (DOT props+=Id)* | Property
		public Alternatives getAlternatives() { return cAlternatives; }

		//Id
		public RuleCall getIdParserRuleCall_0() { return cIdParserRuleCall_0; }

		//(AT_SIGIL | THIS DOT) Id (DOT props+=Id)*
		public Group getGroup_1() { return cGroup_1; }

		//AT_SIGIL | THIS DOT
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//AT_SIGIL
		public RuleCall getAT_SIGILTerminalRuleCall_1_0_0() { return cAT_SIGILTerminalRuleCall_1_0_0; }

		//THIS DOT
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//THIS
		public RuleCall getTHISTerminalRuleCall_1_0_1_0() { return cTHISTerminalRuleCall_1_0_1_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0_1_1() { return cDOTTerminalRuleCall_1_0_1_1; }

		//Id
		public RuleCall getIdParserRuleCall_1_1() { return cIdParserRuleCall_1_1; }

		//(DOT props+=Id)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1_2_0() { return cDOTTerminalRuleCall_1_2_0; }

		//props+=Id
		public Assignment getPropsAssignment_1_2_1() { return cPropsAssignment_1_2_1; }

		//Id
		public RuleCall getPropsIdParserRuleCall_1_2_1_0() { return cPropsIdParserRuleCall_1_2_1_0; }

		//Property
		public RuleCall getPropertyParserRuleCall_2() { return cPropertyParserRuleCall_2; }
	}

	public class AssignableArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignableArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLBRACKETTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAssignableArgListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRBRACKETTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		/// ** An array that can be on the left-hand side of an assignment * / AssignableArray:
		//	LBRACKET AssignableArgList RBRACKET;
		public ParserRule getRule() { return rule; }

		//=> LBRACKET AssignableArgList RBRACKET
		public Group getGroup() { return cGroup; }

		//=> LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_0() { return cLBRACKETTerminalRuleCall_0; }

		//AssignableArgList
		public RuleCall getAssignableArgListParserRuleCall_1() { return cAssignableArgListParserRuleCall_1; }

		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_2() { return cRBRACKETTerminalRuleCall_2; }
	}

	public class AssignableArgListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignableArgList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsAssignableArgParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsAssignableArgParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//AssignableArgList:
		//	args+=AssignableArg (COMMA args+=AssignableArg)*;
		public ParserRule getRule() { return rule; }

		//args+=AssignableArg (COMMA args+=AssignableArg)*
		public Group getGroup() { return cGroup; }

		//args+=AssignableArg
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }

		//AssignableArg
		public RuleCall getArgsAssignableArgParserRuleCall_0_0() { return cArgsAssignableArgParserRuleCall_0_0; }

		//(COMMA args+=AssignableArg)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//args+=AssignableArg
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//AssignableArg
		public RuleCall getArgsAssignableArgParserRuleCall_1_1_0() { return cArgsAssignableArgParserRuleCall_1_1_0; }
	}

	public class AssignableArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignableArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgAssignableParserRuleCall_0_0 = (RuleCall)cArgAssignment_0.eContents().get(0);
		private final Assignment cSplatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSplatELLIPSISTerminalRuleCall_1_0 = (RuleCall)cSplatAssignment_1.eContents().get(0);
		
		//AssignableArg:
		//	arg=Assignable splat?=ELLIPSIS?;
		public ParserRule getRule() { return rule; }

		//arg=Assignable splat?=ELLIPSIS?
		public Group getGroup() { return cGroup; }

		//arg=Assignable
		public Assignment getArgAssignment_0() { return cArgAssignment_0; }

		//Assignable
		public RuleCall getArgAssignableParserRuleCall_0_0() { return cArgAssignableParserRuleCall_0_0; }

		//splat?=ELLIPSIS?
		public Assignment getSplatAssignment_1() { return cSplatAssignment_1; }

		//ELLIPSIS
		public RuleCall getSplatELLIPSISTerminalRuleCall_1_0() { return cSplatELLIPSISTerminalRuleCall_1_0; }
	}

	public class AssignableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDictionaryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignableArrayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Assignable:
		//	Variable | Dictionary | AssignableArray;
		public ParserRule getRule() { return rule; }

		//Variable | Dictionary | AssignableArray
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//Dictionary
		public RuleCall getDictionaryParserRuleCall_1() { return cDictionaryParserRuleCall_1; }

		//AssignableArray
		public RuleCall getAssignableArrayParserRuleCall_2() { return cAssignableArrayParserRuleCall_2; }
	}

	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Assignment cSplatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSplatELLIPSISTerminalRuleCall_1_0 = (RuleCall)cSplatAssignment_1.eContents().get(0);
		
		/// *
		//	 * FIXME: handle more complex assignables
		//	* / Arg:
		//	exp=Expression splat?=ELLIPSIS?;
		public ParserRule getRule() { return rule; }

		//exp=Expression splat?=ELLIPSIS?
		public Group getGroup() { return cGroup; }

		//exp=Expression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_0() { return cExpExpressionParserRuleCall_0_0; }

		//splat?=ELLIPSIS?
		public Assignment getSplatAssignment_1() { return cSplatAssignment_1; }

		//ELLIPSIS
		public RuleCall getSplatELLIPSISTerminalRuleCall_1_0() { return cSplatELLIPSISTerminalRuleCall_1_0; }
	}

	public class ArgLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadArgParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cTailAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTailArgParserRuleCall_1_1_0 = (RuleCall)cTailAssignment_1_1.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ArgLine:
		//	head=Arg (COMMA tail+=Arg)* COMMA?;
		public ParserRule getRule() { return rule; }

		//head=Arg (COMMA tail+=Arg)* COMMA?
		public Group getGroup() { return cGroup; }

		//head=Arg
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//Arg
		public RuleCall getHeadArgParserRuleCall_0_0() { return cHeadArgParserRuleCall_0_0; }

		//(COMMA tail+=Arg)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//tail+=Arg
		public Assignment getTailAssignment_1_1() { return cTailAssignment_1_1; }

		//Arg
		public RuleCall getTailArgParserRuleCall_1_1_0() { return cTailArgParserRuleCall_1_1_0; }

		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2() { return cCOMMATerminalRuleCall_2; }
	}

	public class ExplicitArgListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExplicitArgList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLinesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLinesArgLineParserRuleCall_0_0 = (RuleCall)cLinesAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cTERMINATORTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cLinesAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cLinesArgLineParserRuleCall_1_0_1_0 = (RuleCall)cLinesAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cINDENTTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cLinesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLinesArgLineParserRuleCall_1_1_1_0 = (RuleCall)cLinesAssignment_1_1_1.eContents().get(0);
		private final RuleCall cOUTDENTTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		
		//ExplicitArgList:
		//	lines+=ArgLine (TERMINATOR lines+=ArgLine | INDENT lines+=ArgLine OUTDENT)*;
		public ParserRule getRule() { return rule; }

		//lines+=ArgLine (TERMINATOR lines+=ArgLine | INDENT lines+=ArgLine OUTDENT)*
		public Group getGroup() { return cGroup; }

		//lines+=ArgLine
		public Assignment getLinesAssignment_0() { return cLinesAssignment_0; }

		//ArgLine
		public RuleCall getLinesArgLineParserRuleCall_0_0() { return cLinesArgLineParserRuleCall_0_0; }

		//(TERMINATOR lines+=ArgLine | INDENT lines+=ArgLine OUTDENT)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//TERMINATOR lines+=ArgLine
		public Group getGroup_1_0() { return cGroup_1_0; }

		//TERMINATOR
		public RuleCall getTERMINATORTerminalRuleCall_1_0_0() { return cTERMINATORTerminalRuleCall_1_0_0; }

		//lines+=ArgLine
		public Assignment getLinesAssignment_1_0_1() { return cLinesAssignment_1_0_1; }

		//ArgLine
		public RuleCall getLinesArgLineParserRuleCall_1_0_1_0() { return cLinesArgLineParserRuleCall_1_0_1_0; }

		//INDENT lines+=ArgLine OUTDENT
		public Group getGroup_1_1() { return cGroup_1_1; }

		//INDENT
		public RuleCall getINDENTTerminalRuleCall_1_1_0() { return cINDENTTerminalRuleCall_1_1_0; }

		//lines+=ArgLine
		public Assignment getLinesAssignment_1_1_1() { return cLinesAssignment_1_1_1; }

		//ArgLine
		public RuleCall getLinesArgLineParserRuleCall_1_1_1_0() { return cLinesArgLineParserRuleCall_1_1_1_0; }

		//OUTDENT
		public RuleCall getOUTDENTTerminalRuleCall_1_1_2() { return cOUTDENTTerminalRuleCall_1_1_2; }
	}

	public class ArgListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDummyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDummyExplicitArgListParserRuleCall_1_0_0 = (RuleCall)cDummyAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cINDENTTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cDummyAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDummyExplicitArgListParserRuleCall_1_1_1_0 = (RuleCall)cDummyAssignment_1_1_1.eContents().get(0);
		private final RuleCall cOUTDENTTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		
		//ArgList:
		//	{ArgList} (dummy=ExplicitArgList | INDENT dummy=ExplicitArgList OUTDENT)?;
		public ParserRule getRule() { return rule; }

		//{ArgList} (dummy=ExplicitArgList | INDENT dummy=ExplicitArgList OUTDENT)?
		public Group getGroup() { return cGroup; }

		//{ArgList}
		public Action getArgListAction_0() { return cArgListAction_0; }

		//(dummy=ExplicitArgList | INDENT dummy=ExplicitArgList OUTDENT)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//dummy=ExplicitArgList
		public Assignment getDummyAssignment_1_0() { return cDummyAssignment_1_0; }

		//ExplicitArgList
		public RuleCall getDummyExplicitArgListParserRuleCall_1_0_0() { return cDummyExplicitArgListParserRuleCall_1_0_0; }

		//INDENT dummy=ExplicitArgList OUTDENT
		public Group getGroup_1_1() { return cGroup_1_1; }

		//INDENT
		public RuleCall getINDENTTerminalRuleCall_1_1_0() { return cINDENTTerminalRuleCall_1_1_0; }

		//dummy=ExplicitArgList
		public Assignment getDummyAssignment_1_1_1() { return cDummyAssignment_1_1_1; }

		//ExplicitArgList
		public RuleCall getDummyExplicitArgListParserRuleCall_1_1_1_0() { return cDummyExplicitArgListParserRuleCall_1_1_1_0; }

		//OUTDENT
		public RuleCall getOUTDENTTerminalRuleCall_1_1_2() { return cOUTDENTTerminalRuleCall_1_1_2; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLBRACKETTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cArgListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRBRACKETTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Array:
		//	LBRACKET ArgList RBRACKET;
		public ParserRule getRule() { return rule; }

		//=> LBRACKET ArgList RBRACKET
		public Group getGroup() { return cGroup; }

		//=> LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_0() { return cLBRACKETTerminalRuleCall_0; }

		//ArgList
		public RuleCall getArgListParserRuleCall_1() { return cArgListParserRuleCall_1; }

		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_2() { return cRBRACKETTerminalRuleCall_2; }
	}

	public class DictionaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dictionary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLCURLYTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDictItemsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cRCURLYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// Object in coffeescript
		//Dictionary:
		//	LCURLY DictItems RCURLY;
		public ParserRule getRule() { return rule; }

		//=> LCURLY DictItems RCURLY
		public Group getGroup() { return cGroup; }

		//=> LCURLY
		public RuleCall getLCURLYTerminalRuleCall_0() { return cLCURLYTerminalRuleCall_0; }

		//DictItems
		public RuleCall getDictItemsParserRuleCall_1() { return cDictItemsParserRuleCall_1; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_2() { return cRCURLYTerminalRuleCall_2; }
	}

	public class DictItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DictItems");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDictItemsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDummyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDummyExplicitDictItemsParserRuleCall_1_0_0 = (RuleCall)cDummyAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cINDENTTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cDummyAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDummyExplicitDictItemsParserRuleCall_1_1_1_0 = (RuleCall)cDummyAssignment_1_1_1.eContents().get(0);
		private final RuleCall cOUTDENTTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		
		//DictItems:
		//	{DictItems} (dummy=ExplicitDictItems | INDENT dummy=ExplicitDictItems OUTDENT)?;
		public ParserRule getRule() { return rule; }

		//{DictItems} (dummy=ExplicitDictItems | INDENT dummy=ExplicitDictItems OUTDENT)?
		public Group getGroup() { return cGroup; }

		//{DictItems}
		public Action getDictItemsAction_0() { return cDictItemsAction_0; }

		//(dummy=ExplicitDictItems | INDENT dummy=ExplicitDictItems OUTDENT)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//dummy=ExplicitDictItems
		public Assignment getDummyAssignment_1_0() { return cDummyAssignment_1_0; }

		//ExplicitDictItems
		public RuleCall getDummyExplicitDictItemsParserRuleCall_1_0_0() { return cDummyExplicitDictItemsParserRuleCall_1_0_0; }

		//INDENT dummy=ExplicitDictItems OUTDENT
		public Group getGroup_1_1() { return cGroup_1_1; }

		//INDENT
		public RuleCall getINDENTTerminalRuleCall_1_1_0() { return cINDENTTerminalRuleCall_1_1_0; }

		//dummy=ExplicitDictItems
		public Assignment getDummyAssignment_1_1_1() { return cDummyAssignment_1_1_1; }

		//ExplicitDictItems
		public RuleCall getDummyExplicitDictItemsParserRuleCall_1_1_1_0() { return cDummyExplicitDictItemsParserRuleCall_1_1_1_0; }

		//OUTDENT
		public RuleCall getOUTDENTTerminalRuleCall_1_1_2() { return cOUTDENTTerminalRuleCall_1_1_2; }
	}

	public class ExplicitDictItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExplicitDictItems");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLinesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLinesDictLineParserRuleCall_0_0 = (RuleCall)cLinesAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cTERMINATORTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cLinesAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cLinesDictLineParserRuleCall_1_0_1_0 = (RuleCall)cLinesAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cINDENTTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cLinesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLinesDictLineParserRuleCall_1_1_1_0 = (RuleCall)cLinesAssignment_1_1_1.eContents().get(0);
		private final RuleCall cOUTDENTTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		
		//ExplicitDictItems:
		//	lines+=DictLine (TERMINATOR lines+=DictLine | INDENT lines+=DictLine OUTDENT)*;
		public ParserRule getRule() { return rule; }

		//lines+=DictLine (TERMINATOR lines+=DictLine | INDENT lines+=DictLine OUTDENT)*
		public Group getGroup() { return cGroup; }

		//lines+=DictLine
		public Assignment getLinesAssignment_0() { return cLinesAssignment_0; }

		//DictLine
		public RuleCall getLinesDictLineParserRuleCall_0_0() { return cLinesDictLineParserRuleCall_0_0; }

		//(TERMINATOR lines+=DictLine | INDENT lines+=DictLine OUTDENT)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//TERMINATOR lines+=DictLine
		public Group getGroup_1_0() { return cGroup_1_0; }

		//TERMINATOR
		public RuleCall getTERMINATORTerminalRuleCall_1_0_0() { return cTERMINATORTerminalRuleCall_1_0_0; }

		//lines+=DictLine
		public Assignment getLinesAssignment_1_0_1() { return cLinesAssignment_1_0_1; }

		//DictLine
		public RuleCall getLinesDictLineParserRuleCall_1_0_1_0() { return cLinesDictLineParserRuleCall_1_0_1_0; }

		//INDENT lines+=DictLine OUTDENT
		public Group getGroup_1_1() { return cGroup_1_1; }

		//INDENT
		public RuleCall getINDENTTerminalRuleCall_1_1_0() { return cINDENTTerminalRuleCall_1_1_0; }

		//lines+=DictLine
		public Assignment getLinesAssignment_1_1_1() { return cLinesAssignment_1_1_1; }

		//DictLine
		public RuleCall getLinesDictLineParserRuleCall_1_1_1_0() { return cLinesDictLineParserRuleCall_1_1_1_0; }

		//OUTDENT
		public RuleCall getOUTDENTTerminalRuleCall_1_1_2() { return cOUTDENTTerminalRuleCall_1_1_2; }
	}

	public class DictLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DictLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadDictItemParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cTailAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTailDictItemParserRuleCall_1_1_0 = (RuleCall)cTailAssignment_1_1.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DictLine:
		//	head=DictItem (COMMA tail+=DictItem)* COMMA?;
		public ParserRule getRule() { return rule; }

		//head=DictItem (COMMA tail+=DictItem)* COMMA?
		public Group getGroup() { return cGroup; }

		//head=DictItem
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//DictItem
		public RuleCall getHeadDictItemParserRuleCall_0_0() { return cHeadDictItemParserRuleCall_0_0; }

		//(COMMA tail+=DictItem)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//tail+=DictItem
		public Assignment getTailAssignment_1_1() { return cTailAssignment_1_1; }

		//DictItem
		public RuleCall getTailDictItemParserRuleCall_1_1_0() { return cTailDictItemParserRuleCall_1_1_0; }

		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2() { return cCOMMATerminalRuleCall_2; }
	}

	public class DictItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DictItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDictItemAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyDictKeyParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOLONTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cValueExpressionParserRuleCall_2_1_0_0 = (RuleCall)cValueAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cINDENTTerminalRuleCall_2_1_1_0 = (RuleCall)cGroup_2_1_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cValueAssignment_2_1_1_1.eContents().get(0);
		private final RuleCall cOUTDENTTerminalRuleCall_2_1_1_2 = (RuleCall)cGroup_2_1_1.eContents().get(2);
		
		//DictItem:
		//	{DictItem} key=DictKey (COLON (value=Expression | INDENT value=Expression OUTDENT))?;
		public ParserRule getRule() { return rule; }

		//{DictItem} key=DictKey (COLON (value=Expression | INDENT value=Expression OUTDENT))?
		public Group getGroup() { return cGroup; }

		//{DictItem}
		public Action getDictItemAction_0() { return cDictItemAction_0; }

		//key=DictKey
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//DictKey
		public RuleCall getKeyDictKeyParserRuleCall_1_0() { return cKeyDictKeyParserRuleCall_1_0; }

		//(COLON (value=Expression | INDENT value=Expression OUTDENT))?
		public Group getGroup_2() { return cGroup_2; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_2_0() { return cCOLONTerminalRuleCall_2_0; }

		//value=Expression | INDENT value=Expression OUTDENT
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//value=Expression
		public Assignment getValueAssignment_2_1_0() { return cValueAssignment_2_1_0; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_1_0_0() { return cValueExpressionParserRuleCall_2_1_0_0; }

		//INDENT value=Expression OUTDENT
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//INDENT
		public RuleCall getINDENTTerminalRuleCall_2_1_1_0() { return cINDENTTerminalRuleCall_2_1_1_0; }

		//value=Expression
		public Assignment getValueAssignment_2_1_1_1() { return cValueAssignment_2_1_1_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_1_1_1_0() { return cValueExpressionParserRuleCall_2_1_1_1_0; }

		//OUTDENT
		public RuleCall getOUTDENTTerminalRuleCall_2_1_1_2() { return cOUTDENTTerminalRuleCall_2_1_1_2; }
	}

	public class DictKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DictKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DictKey:
		//	Literal | Id;
		public ParserRule getRule() { return rule; }

		//Literal | Id
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//Id
		public RuleCall getIdParserRuleCall_1() { return cIdParserRuleCall_1; }
	}

	public class LambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lambda");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cPARAM_STARTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cParamsAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_0_1_0_0 = (RuleCall)cParamsAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_0_1_1_0 = (RuleCall)cGroup_0_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_0_1_1_1_0 = (RuleCall)cParamsAssignment_0_1_1_1.eContents().get(0);
		private final RuleCall cPARAM_ENDTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cFUNC_ARROWTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cBOUND_FUNC_ARROWTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//// Code in coffeescript
		//Lambda:
		//	(PARAM_START (params+=Param (COMMA params+=Param)*)? PARAM_END)? (FUNC_ARROW | BOUND_FUNC_ARROW) body=Block;
		public ParserRule getRule() { return rule; }

		//(PARAM_START (params+=Param (COMMA params+=Param)*)? PARAM_END)? (FUNC_ARROW | BOUND_FUNC_ARROW) body=Block
		public Group getGroup() { return cGroup; }

		//(PARAM_START (params+=Param (COMMA params+=Param)*)? PARAM_END)?
		public Group getGroup_0() { return cGroup_0; }

		//PARAM_START
		public RuleCall getPARAM_STARTTerminalRuleCall_0_0() { return cPARAM_STARTTerminalRuleCall_0_0; }

		//(params+=Param (COMMA params+=Param)*)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//params+=Param
		public Assignment getParamsAssignment_0_1_0() { return cParamsAssignment_0_1_0; }

		//Param
		public RuleCall getParamsParamParserRuleCall_0_1_0_0() { return cParamsParamParserRuleCall_0_1_0_0; }

		//(COMMA params+=Param)*
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0_1_1_0() { return cCOMMATerminalRuleCall_0_1_1_0; }

		//params+=Param
		public Assignment getParamsAssignment_0_1_1_1() { return cParamsAssignment_0_1_1_1; }

		//Param
		public RuleCall getParamsParamParserRuleCall_0_1_1_1_0() { return cParamsParamParserRuleCall_0_1_1_1_0; }

		//PARAM_END
		public RuleCall getPARAM_ENDTerminalRuleCall_0_2() { return cPARAM_ENDTerminalRuleCall_0_2; }

		//FUNC_ARROW | BOUND_FUNC_ARROW
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//FUNC_ARROW
		public RuleCall getFUNC_ARROWTerminalRuleCall_1_0() { return cFUNC_ARROWTerminalRuleCall_1_0; }

		//BOUND_FUNC_ARROW
		public RuleCall getBOUND_FUNC_ARROWTerminalRuleCall_1_1() { return cBOUND_FUNC_ARROWTerminalRuleCall_1_1; }

		//body=Block
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0() { return cBodyBlockParserRuleCall_2_0; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIdParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cArrayParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cDictionaryParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cThisPropertyParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSplatAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cSplatELLIPSISTerminalRuleCall_1_0_0 = (RuleCall)cSplatAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cEQUALTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cDefaultValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDefaultValueExpressionParserRuleCall_1_1_1_0 = (RuleCall)cDefaultValueAssignment_1_1_1.eContents().get(0);
		
		//Param:
		//	(Id | Array | Dictionary | ThisProperty) (splat?=ELLIPSIS | EQUAL defaultValue=Expression)?;
		public ParserRule getRule() { return rule; }

		//(Id | Array | Dictionary | ThisProperty) (splat?=ELLIPSIS | EQUAL defaultValue=Expression)?
		public Group getGroup() { return cGroup; }

		//Id | Array | Dictionary | ThisProperty
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Id
		public RuleCall getIdParserRuleCall_0_0() { return cIdParserRuleCall_0_0; }

		//Array
		public RuleCall getArrayParserRuleCall_0_1() { return cArrayParserRuleCall_0_1; }

		//Dictionary
		public RuleCall getDictionaryParserRuleCall_0_2() { return cDictionaryParserRuleCall_0_2; }

		//ThisProperty
		public RuleCall getThisPropertyParserRuleCall_0_3() { return cThisPropertyParserRuleCall_0_3; }

		//(splat?=ELLIPSIS | EQUAL defaultValue=Expression)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//splat?=ELLIPSIS
		public Assignment getSplatAssignment_1_0() { return cSplatAssignment_1_0; }

		//ELLIPSIS
		public RuleCall getSplatELLIPSISTerminalRuleCall_1_0_0() { return cSplatELLIPSISTerminalRuleCall_1_0_0; }

		//EQUAL defaultValue=Expression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_1_1_0() { return cEQUALTerminalRuleCall_1_1_0; }

		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_1_1_1() { return cDefaultValueAssignment_1_1_1; }

		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_1_1_1_0() { return cDefaultValueExpressionParserRuleCall_1_1_1_0; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NumberLiteral:
		//	{NumberLiteral} NUMBER;
		public ParserRule getRule() { return rule; }

		//{NumberLiteral} NUMBER
		public Group getGroup() { return cGroup; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_0() { return cNumberLiteralAction_0; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StringLiteral:
		//	{StringLiteral} STRING;
		public ParserRule getRule() { return rule; }

		//{StringLiteral} STRING
		public Group getGroup() { return cGroup; }

		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class BoolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBOOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//BoolLiteral:
		//	{BoolLiteral} BOOL;
		public ParserRule getRule() { return rule; }

		//{BoolLiteral} BOOL
		public Group getGroup() { return cGroup; }

		//{BoolLiteral}
		public Action getBoolLiteralAction_0() { return cBoolLiteralAction_0; }

		//BOOL
		public RuleCall getBOOLTerminalRuleCall_1() { return cBOOLTerminalRuleCall_1; }
	}

	public class JSLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JSLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJSLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cJSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//JSLiteral:
		//	{JSLiteral} JS;
		public ParserRule getRule() { return rule; }

		//{JSLiteral} JS
		public Group getGroup() { return cGroup; }

		//{JSLiteral}
		public Action getJSLiteralAction_0() { return cJSLiteralAction_0; }

		//JS
		public RuleCall getJSTerminalRuleCall_1() { return cJSTerminalRuleCall_1; }
	}

	public class RegexLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegexLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegexLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cREGEXTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RegexLiteral:
		//	{RegexLiteral} REGEX;
		public ParserRule getRule() { return rule; }

		//{RegexLiteral} REGEX
		public Group getGroup() { return cGroup; }

		//{RegexLiteral}
		public Action getRegexLiteralAction_0() { return cRegexLiteralAction_0; }

		//REGEX
		public RuleCall getREGEXTerminalRuleCall_1() { return cREGEXTerminalRuleCall_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cJSLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRegexLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Literal:
		//	NumberLiteral | StringLiteral | BoolLiteral | JSLiteral | RegexLiteral;
		public ParserRule getRule() { return rule; }

		//NumberLiteral | StringLiteral | BoolLiteral | JSLiteral | RegexLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }

		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_2() { return cBoolLiteralParserRuleCall_2; }

		//JSLiteral
		public RuleCall getJSLiteralParserRuleCall_3() { return cJSLiteralParserRuleCall_3; }

		//RegexLiteral
		public RuleCall getRegexLiteralParserRuleCall_4() { return cRegexLiteralParserRuleCall_4; }
	}

	public class ParentheticalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parenthetical");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cGroup_0_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_0_0_0_0 = (RuleCall)cGroup_0_0_0.eContents().get(0);
		private final RuleCall cINDENTTerminalRuleCall_0_0_0_1 = (RuleCall)cGroup_0_0_0.eContents().get(1);
		private final Assignment cContentAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cContentBodyParserRuleCall_0_1_0 = (RuleCall)cContentAssignment_0_1.eContents().get(0);
		private final RuleCall cOUTDENTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cRPARENTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cContentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContentBodyParserRuleCall_1_1_0 = (RuleCall)cContentAssignment_1_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Parenthetical:
		//	=> (LPAREN INDENT) content=Body OUTDENT RPAREN | LPAREN content=Body RPAREN;
		public ParserRule getRule() { return rule; }

		//=> (LPAREN INDENT) content=Body OUTDENT RPAREN | LPAREN content=Body RPAREN
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> (LPAREN INDENT) content=Body OUTDENT RPAREN
		public Group getGroup_0() { return cGroup_0; }

		//=> (LPAREN INDENT)
		public Group getGroup_0_0() { return cGroup_0_0; }

		//LPAREN INDENT
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_0_0_0() { return cLPARENTerminalRuleCall_0_0_0_0; }

		//INDENT
		public RuleCall getINDENTTerminalRuleCall_0_0_0_1() { return cINDENTTerminalRuleCall_0_0_0_1; }

		//content=Body
		public Assignment getContentAssignment_0_1() { return cContentAssignment_0_1; }

		//Body
		public RuleCall getContentBodyParserRuleCall_0_1_0() { return cContentBodyParserRuleCall_0_1_0; }

		//OUTDENT
		public RuleCall getOUTDENTTerminalRuleCall_0_2() { return cOUTDENTTerminalRuleCall_0_2; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_3() { return cRPARENTerminalRuleCall_0_3; }

		//=> LPAREN content=Body RPAREN
		public Group getGroup_1() { return cGroup_1; }

		//=> LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0() { return cLPARENTerminalRuleCall_1_0; }

		//content=Body
		public Assignment getContentAssignment_1_1() { return cContentAssignment_1_1; }

		//Body
		public RuleCall getContentBodyParserRuleCall_1_1_0() { return cContentBodyParserRuleCall_1_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_2() { return cRPARENTerminalRuleCall_1_2; }
	}
	
	
	private RootElements pRoot;
	private BodyElements pBody;
	private LineElements pLine;
	private StmtElements pStmt;
	private CommentElements pComment;
	private RequireStmtElements pRequireStmt;
	private ReturnStmtElements pReturnStmt;
	private ThrowStmtElements pThrowStmt;
	private SuperClassElements pSuperClass;
	private ClassDeclarationElements pClassDeclaration;
	private AssignedClassDeclarationElements pAssignedClassDeclaration;
	private ExpressionElements pExpression;
	private PostfixElements pPostfix;
	private ForBodyElements pForBody;
	private ForValueElements pForValue;
	private ForSourceElements pForSource;
	private RangeElements pRange;
	private AssignmentElements pAssignment;
	private AssignedElements pAssigned;
	private LogicOpElements pLogicOp;
	private CompareOpElements pCompareOp;
	private RelationOpElements pRelationOp;
	private ShiftOpElements pShiftOp;
	private AdditiveOpElements pAdditiveOp;
	private MathOpElements pMathOp;
	private UnaryOpElements pUnaryOp;
	private ApplicationElements pApplication;
	private FeatureCallElements pFeatureCall;
	private FunctionCallElements pFunctionCall;
	private PropertyAccessElements pPropertyAccess;
	private ThisPropertyElements pThisProperty;
	private NamedPropertyAccessElements pNamedPropertyAccess;
	private IndexedPropertyAccessElements pIndexedPropertyAccess;
	private IndexElements pIndex;
	private PrimaryExpressionElements pPrimaryExpression;
	private BlockElements pBlock;
	private CaseElements pCase;
	private IfExpElements pIfExp;
	private CondBlockElements pCondBlock;
	private IdRefElements pIdRef;
	private IdElements pId;
	private PropertyElements pProperty;
	private VariableElements pVariable;
	private AssignableArrayElements pAssignableArray;
	private AssignableArgListElements pAssignableArgList;
	private AssignableArgElements pAssignableArg;
	private AssignableElements pAssignable;
	private ArgElements pArg;
	private ArgLineElements pArgLine;
	private ExplicitArgListElements pExplicitArgList;
	private ArgListElements pArgList;
	private ArrayElements pArray;
	private DictionaryElements pDictionary;
	private DictItemsElements pDictItems;
	private ExplicitDictItemsElements pExplicitDictItems;
	private DictLineElements pDictLine;
	private DictItemElements pDictItem;
	private DictKeyElements pDictKey;
	private LambdaElements pLambda;
	private ParamElements pParam;
	private NumberLiteralElements pNumberLiteral;
	private StringLiteralElements pStringLiteral;
	private BoolLiteralElements pBoolLiteral;
	private JSLiteralElements pJSLiteral;
	private RegexLiteralElements pRegexLiteral;
	private LiteralElements pLiteral;
	private ParentheticalElements pParenthetical;
	private TerminalRule tELLIPSIS;
	private TerminalRule tDOT_DOT;
	private TerminalRule tDOUBLE_COLON;
	private TerminalRule tSHIFT;
	private TerminalRule tBOUND_FUNC_ARROW;
	private TerminalRule tFUNC_ARROW;
	private TerminalRule tCOMPARE;
	private TerminalRule tCOMPOUND_ASSIGN;
	private TerminalRule tPLUS_PLUS;
	private TerminalRule tMINUS_MINUS;
	private TerminalRule tPARAM_END;
	private TerminalRule tPARAM_START;
	private TerminalRule tAT_SIGIL;
	private TerminalRule tBOOL;
	private TerminalRule tBY;
	private TerminalRule tCALL_END;
	private TerminalRule tCALL_START;
	private TerminalRule tCATCH;
	private TerminalRule tCLASS;
	private TerminalRule tCOLON;
	private TerminalRule tCOLON_SLASH;
	private TerminalRule tCOMMA;
	private TerminalRule tDOT;
	private TerminalRule tELSE;
	private TerminalRule tEQUAL;
	private TerminalRule tEXTENDS;
	private TerminalRule tFINALLY;
	private TerminalRule tFOR;
	private TerminalRule tFORIN;
	private TerminalRule tFOROF;
	private TerminalRule tFUNC_EXIST;
	private TerminalRule tHERECOMMENT;
	private TerminalRule tIF;
	private TerminalRule tINDENT;
	private TerminalRule tINDEX_END;
	private TerminalRule tINDEX_PROTO;
	private TerminalRule tINDEX_SOAK;
	private TerminalRule tINDEX_START;
	private TerminalRule tJS;
	private TerminalRule tLBRACKET;
	private TerminalRule tLCURLY;
	private TerminalRule tLEADING_WHEN;
	private TerminalRule tLOGIC;
	private TerminalRule tLOOP;
	private TerminalRule tLPAREN;
	private TerminalRule tMATH;
	private TerminalRule tMINUS;
	private TerminalRule tNEW;
	private TerminalRule tNUMBER;
	private TerminalRule tOUTDENT;
	private TerminalRule tOWN;
	private TerminalRule tPLUS;
	private TerminalRule tPOST_IF;
	private TerminalRule tQUESTION;
	private TerminalRule tQUESTION_DOT;
	private TerminalRule tRBRACKET;
	private TerminalRule tRCURLY;
	private TerminalRule tREGEX;
	private TerminalRule tRELATION;
	private TerminalRule tRETURN;
	private TerminalRule tRPAREN;
	private TerminalRule tSTATEMENT;
	private TerminalRule tSTRING;
	private TerminalRule tSUPER;
	private TerminalRule tSWITCH;
	private TerminalRule tTERMINATOR;
	private TerminalRule tTHEN;
	private TerminalRule tTHIS;
	private TerminalRule tTHROW;
	private TerminalRule tTRY;
	private TerminalRule tUNARY;
	private TerminalRule tUNTIL;
	private TerminalRule tWHEN;
	private TerminalRule tWHILE;
	private TerminalRule tLOGIC_WORD;
	private TerminalRule tCOMPARE_WORD;
	private TerminalRule tUNARY_WORD;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tIDENTIFIER;
	
	private final Grammar grammar;

	@Inject
	public CoffeeScriptGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("csep.CoffeeScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Root:
	//	(Body | Block TERMINATOR)?;
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Body:
	//	lines+=Line (TERMINATOR lines+=Line?)*;
	public BodyElements getBodyAccess() {
		return (pBody != null) ? pBody : (pBody = new BodyElements());
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//Line:
	//	Stmt | Expression;
	public LineElements getLineAccess() {
		return (pLine != null) ? pLine : (pLine = new LineElements());
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}

	//Stmt:
	//	ReturnStmt | ThrowStmt | RequireStmt | Comment | ClassDeclaration | statement=STATEMENT;
	public StmtElements getStmtAccess() {
		return (pStmt != null) ? pStmt : (pStmt = new StmtElements());
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}

	//Comment:
	//	comment=HERECOMMENT;
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	/// **
	// * Treat it a special way, because it takes care of import
	// * / RequireStmt:
	//	=> (importedNamespace=Id EQUAL "require") CALL_START uri=STRING CALL_END;
	public RequireStmtElements getRequireStmtAccess() {
		return (pRequireStmt != null) ? pRequireStmt : (pRequireStmt = new RequireStmtElements());
	}
	
	public ParserRule getRequireStmtRule() {
		return getRequireStmtAccess().getRule();
	}

	//ReturnStmt:
	//	{ReturnStmt} RETURN expression=Expression? (POST_IF condition=Expression)?;
	public ReturnStmtElements getReturnStmtAccess() {
		return (pReturnStmt != null) ? pReturnStmt : (pReturnStmt = new ReturnStmtElements());
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}

	//ThrowStmt:
	//	THROW exp=Expression;
	public ThrowStmtElements getThrowStmtAccess() {
		return (pThrowStmt != null) ? pThrowStmt : (pThrowStmt = new ThrowStmtElements());
	}
	
	public ParserRule getThrowStmtRule() {
		return getThrowStmtAccess().getRule();
	}

	/// **
	// * Coffeescript is permissive, it can be any expression, but we want to be able to check it as crossref
	// * / SuperClass:
	//	IdRef | Property;
	public SuperClassElements getSuperClassAccess() {
		return (pSuperClass != null) ? pSuperClass : (pSuperClass = new SuperClassElements());
	}
	
	public ParserRule getSuperClassRule() {
		return getSuperClassAccess().getRule();
	}

	//ClassDeclaration:
	//	{ClassDeclaration} CLASS (body=Block | EXTENDS extend=SuperClass body=Block? | name=(Id | Property) (EXTENDS
	//	extend=SuperClass)? body=Block)?;
	public ClassDeclarationElements getClassDeclarationAccess() {
		return (pClassDeclaration != null) ? pClassDeclaration : (pClassDeclaration = new ClassDeclarationElements());
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}

	/// **
	// * FIXME: it should be the same as ClassDeclaration, but it would result in a non-LL decision,
	// * so I just removed the problematic options (a class body and a name or a superclass is required).
	// * / AssignedClassDeclaration:
	//	{ClassDeclaration} CLASS (EXTENDS extend=SuperClass body=Block | name=(Id | Property) (EXTENDS extend=SuperClass)?
	//	body=Block)?;
	public AssignedClassDeclarationElements getAssignedClassDeclarationAccess() {
		return (pAssignedClassDeclaration != null) ? pAssignedClassDeclaration : (pAssignedClassDeclaration = new AssignedClassDeclarationElements());
	}
	
	public ParserRule getAssignedClassDeclarationRule() {
		return getAssignedClassDeclarationAccess().getRule();
	}

	//Expression:
	//	Postfix;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// right-assoc
	//// Note: the lexer seems to know it should give a POST_IF token here
	//Postfix returns Expression: //Assignment postfix+=(PostfixIf | ForBody)?;
	//	Assignment (POST_IF {If.dummy=current} condition=Expression | FOR {For.dummy=current} body=ForBody | WHILE
	//	{While.dummy=current} body=Expression (WHEN when=Expression)? | UNTIL {Until.dummy=current} body=Expression (WHEN
	//	when=Expression)?)?;
	public PostfixElements getPostfixAccess() {
		return (pPostfix != null) ? pPostfix : (pPostfix = new PostfixElements());
	}
	
	public ParserRule getPostfixRule() {
		return getPostfixAccess().getRule();
	}

	//ForBody returns Expression: //FIXME: Range |
	//	OWN? indexes+=ForValue (COMMA indexes+=ForValue)* source=ForSource;
	public ForBodyElements getForBodyAccess() {
		return (pForBody != null) ? pForBody : (pForBody = new ForBodyElements());
	}
	
	public ParserRule getForBodyRule() {
		return getForBodyAccess().getRule();
	}

	////FIXME | Array | Dictionary;
	//ForValue:
	//	Id;
	public ForValueElements getForValueAccess() {
		return (pForValue != null) ? pForValue : (pForValue = new ForValueElements());
	}
	
	public ParserRule getForValueRule() {
		return getForValueAccess().getRule();
	}

	//ForSource:
	//	{ForSource} (FOROF source=Expression (WHEN when=Expression)? | FORIN source=Expression (WHEN when=Expression (BY
	//	by=Expression)? | BY by=Expression (WHEN when=Expression)?)?);
	public ForSourceElements getForSourceAccess() {
		return (pForSource != null) ? pForSource : (pForSource = new ForSourceElements());
	}
	
	public ParserRule getForSourceRule() {
		return getForSourceAccess().getRule();
	}

	//Range:
	//	=> (LBRACKET start=Expression (DOT_DOT | ELLIPSIS)) end=Expression RBRACKET;
	public RangeElements getRangeAccess() {
		return (pRange != null) ? pRange : (pRange = new RangeElements());
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//Assignment returns Expression:
	//	=> (left=Assignable operator=(EQUAL | COMPOUND_ASSIGN)) right=Assigned | LogicOp;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Assigned returns Expression:
	//	Expression | INDENT Expression OUTDENT | AssignedClassDeclaration;
	public AssignedElements getAssignedAccess() {
		return (pAssigned != null) ? pAssigned : (pAssigned = new AssignedElements());
	}
	
	public ParserRule getAssignedRule() {
		return getAssignedAccess().getRule();
	}

	//LogicOp returns Expression:
	//	CompareOp (=> ({BinaryExp.left=current} operator=LOGIC) right=CompareOp)*;
	public LogicOpElements getLogicOpAccess() {
		return (pLogicOp != null) ? pLogicOp : (pLogicOp = new LogicOpElements());
	}
	
	public ParserRule getLogicOpRule() {
		return getLogicOpAccess().getRule();
	}

	//CompareOp returns Expression:
	//	RelationOp (=> ({BinaryExp.left=current} operator=COMPARE) right=RelationOp)*;
	public CompareOpElements getCompareOpAccess() {
		return (pCompareOp != null) ? pCompareOp : (pCompareOp = new CompareOpElements());
	}
	
	public ParserRule getCompareOpRule() {
		return getCompareOpAccess().getRule();
	}

	//RelationOp returns Expression:
	//	ShiftOp (=> ({BinaryExp.left=current} operator=RELATION) right=ShiftOp)*;
	public RelationOpElements getRelationOpAccess() {
		return (pRelationOp != null) ? pRelationOp : (pRelationOp = new RelationOpElements());
	}
	
	public ParserRule getRelationOpRule() {
		return getRelationOpAccess().getRule();
	}

	//ShiftOp returns Expression:
	//	AdditiveOp (=> ({BinaryExp.left=current} operator=SHIFT) right=AdditiveOp)*;
	public ShiftOpElements getShiftOpAccess() {
		return (pShiftOp != null) ? pShiftOp : (pShiftOp = new ShiftOpElements());
	}
	
	public ParserRule getShiftOpRule() {
		return getShiftOpAccess().getRule();
	}

	//AdditiveOp returns Expression:
	//	MathOp (=> ({BinaryExp.left=current} operator=(PLUS | MINUS)) right=MathOp)*;
	public AdditiveOpElements getAdditiveOpAccess() {
		return (pAdditiveOp != null) ? pAdditiveOp : (pAdditiveOp = new AdditiveOpElements());
	}
	
	public ParserRule getAdditiveOpRule() {
		return getAdditiveOpAccess().getRule();
	}

	//MathOp returns Expression:
	//	UnaryOp (=> ({BinaryExp.left=current} operator=MATH) right=UnaryOp)*;
	public MathOpElements getMathOpAccess() {
		return (pMathOp != null) ? pMathOp : (pMathOp = new MathOpElements());
	}
	
	public ParserRule getMathOpRule() {
		return getMathOpAccess().getRule();
	}

	//UnaryOp returns Expression:
	//	(UNARY | PLUS | MINUS) Expression | (PLUS_PLUS | MINUS_MINUS) Variable | // FIXME: postfix increment
	//	Application QUESTION?;
	public UnaryOpElements getUnaryOpAccess() {
		return (pUnaryOp != null) ? pUnaryOp : (pUnaryOp = new UnaryOpElements());
	}
	
	public ParserRule getUnaryOpRule() {
		return getUnaryOpAccess().getRule();
	}

	//// Nested function calls and property accesses -- I couldn't come up with a better name
	//Application:
	//	{SuperCall} (SUPER (CALL_START args=ArgList CALL_END)?) | value=PrimaryExpression features+=FeatureCall*;
	public ApplicationElements getApplicationAccess() {
		return (pApplication != null) ? pApplication : (pApplication = new ApplicationElements());
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}

	//FeatureCall:
	//	FunctionCall | PropertyAccess;
	public FeatureCallElements getFeatureCallAccess() {
		return (pFeatureCall != null) ? pFeatureCall : (pFeatureCall = new FeatureCallElements());
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//FunctionCall:
	//	{FunctionCall} FUNC_EXIST? CALL_START args=ArgList CALL_END;
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//PropertyAccess:
	//	NamedPropertyAccess | IndexedPropertyAccess;
	public PropertyAccessElements getPropertyAccessAccess() {
		return (pPropertyAccess != null) ? pPropertyAccess : (pPropertyAccess = new PropertyAccessElements());
	}
	
	public ParserRule getPropertyAccessRule() {
		return getPropertyAccessAccess().getRule();
	}

	//ThisProperty:
	//	AT_SIGIL Id;
	public ThisPropertyElements getThisPropertyAccess() {
		return (pThisProperty != null) ? pThisProperty : (pThisProperty = new ThisPropertyElements());
	}
	
	public ParserRule getThisPropertyRule() {
		return getThisPropertyAccess().getRule();
	}

	//NamedPropertyAccess:
	//	accessor=(DOT | QUESTION_DOT) name=Id | accessor=DOUBLE_COLON name=Id?;
	public NamedPropertyAccessElements getNamedPropertyAccessAccess() {
		return (pNamedPropertyAccess != null) ? pNamedPropertyAccess : (pNamedPropertyAccess = new NamedPropertyAccessElements());
	}
	
	public ParserRule getNamedPropertyAccessRule() {
		return getNamedPropertyAccessAccess().getRule();
	}

	//IndexedPropertyAccess:
	//	INDEX_START index=Index INDEX_END;
	public IndexedPropertyAccessElements getIndexedPropertyAccessAccess() {
		return (pIndexedPropertyAccess != null) ? pIndexedPropertyAccess : (pIndexedPropertyAccess = new IndexedPropertyAccessElements());
	}
	
	public ParserRule getIndexedPropertyAccessRule() {
		return getIndexedPropertyAccessAccess().getRule();
	}

	//Index:
	//	=> dots=(DOT_DOT | ELLIPSIS) end=Expression | => (start=Expression dots=(DOT_DOT | ELLIPSIS)) end=Expression? |
	//	exp=Expression;
	public IndexElements getIndexAccess() {
		return (pIndex != null) ? pIndex : (pIndex = new IndexElements());
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}

	//// Try Range before Array
	//PrimaryExpression:
	//	IfExp | Parenthetical | Literal | Range | Array | Dictionary | Lambda | ThisProperty | {ThisAlone} THIS | {For} (FOR
	//	loop=ForBody body=Block) | {While} (WHILE loop=Expression (WHEN when=Expression)? body=Block) | {Until} (UNTIL
	//	loop=Expression (WHEN when=Expression)? body=Block) | {Loop} (LOOP body=Block) | {TryCatch} (TRY body=Block (CATCH
	//	exception=Id catchBlock=Block (FINALLY finallyBlock=Block)? | FINALLY finallyBlock=Block)?) | {Switch} (SWITCH
	//	exp=Expression? INDENT cases+=Case* (ELSE elseBlock=Block)? OUTDENT) | IdRef;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Block:
	//	{Block} INDENT Body? OUTDENT;
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//// a switch case (called When in coffeescript)
	//Case:
	//	LEADING_WHEN whens+=Expression (COMMA whens+=Expression)* then=Block TERMINATOR?;
	public CaseElements getCaseAccess() {
		return (pCase != null) ? pCase : (pCase = new CaseElements());
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//IfExp:
	//	blocks+=CondBlock (ELSE blocks+=CondBlock)* (ELSE defaultBlock=Block)?;
	public IfExpElements getIfExpAccess() {
		return (pIfExp != null) ? pIfExp : (pIfExp = new IfExpElements());
	}
	
	public ParserRule getIfExpRule() {
		return getIfExpAccess().getRule();
	}

	//// IF can be 'if' or 'unless'
	//CondBlock:
	//	operator=IF condition=Expression action=Block;
	public CondBlockElements getCondBlockAccess() {
		return (pCondBlock != null) ? pCondBlock : (pCondBlock = new CondBlockElements());
	}
	
	public ParserRule getCondBlockRule() {
		return getCondBlockAccess().getRule();
	}

	//IdRef:
	//	val=[Id|IDENTIFIER];
	public IdRefElements getIdRefAccess() {
		return (pIdRef != null) ? pIdRef : (pIdRef = new IdRefElements());
	}
	
	public ParserRule getIdRefRule() {
		return getIdRefAccess().getRule();
	}

	//Id:
	//	name=IDENTIFIER;
	public IdElements getIdAccess() {
		return (pId != null) ? pId : (pId = new IdElements());
	}
	
	public ParserRule getIdRule() {
		return getIdAccess().getRule();
	}

	//Property:
	//	=> (IdRef accessor=(DOT | DOUBLE_COLON | QUESTION_DOT)) prop=Id // FIXME: property is actually "Expression Accessor"
	//	| => (IdRef INDEX_START) index=Index INDEX_END;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Variable:
	//	Id | (AT_SIGIL | THIS DOT) Id (DOT props+=Id)* | Property;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	/// ** An array that can be on the left-hand side of an assignment * / AssignableArray:
	//	LBRACKET AssignableArgList RBRACKET;
	public AssignableArrayElements getAssignableArrayAccess() {
		return (pAssignableArray != null) ? pAssignableArray : (pAssignableArray = new AssignableArrayElements());
	}
	
	public ParserRule getAssignableArrayRule() {
		return getAssignableArrayAccess().getRule();
	}

	//AssignableArgList:
	//	args+=AssignableArg (COMMA args+=AssignableArg)*;
	public AssignableArgListElements getAssignableArgListAccess() {
		return (pAssignableArgList != null) ? pAssignableArgList : (pAssignableArgList = new AssignableArgListElements());
	}
	
	public ParserRule getAssignableArgListRule() {
		return getAssignableArgListAccess().getRule();
	}

	//AssignableArg:
	//	arg=Assignable splat?=ELLIPSIS?;
	public AssignableArgElements getAssignableArgAccess() {
		return (pAssignableArg != null) ? pAssignableArg : (pAssignableArg = new AssignableArgElements());
	}
	
	public ParserRule getAssignableArgRule() {
		return getAssignableArgAccess().getRule();
	}

	//Assignable:
	//	Variable | Dictionary | AssignableArray;
	public AssignableElements getAssignableAccess() {
		return (pAssignable != null) ? pAssignable : (pAssignable = new AssignableElements());
	}
	
	public ParserRule getAssignableRule() {
		return getAssignableAccess().getRule();
	}

	/// *
	//	 * FIXME: handle more complex assignables
	//	* / Arg:
	//	exp=Expression splat?=ELLIPSIS?;
	public ArgElements getArgAccess() {
		return (pArg != null) ? pArg : (pArg = new ArgElements());
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}

	//ArgLine:
	//	head=Arg (COMMA tail+=Arg)* COMMA?;
	public ArgLineElements getArgLineAccess() {
		return (pArgLine != null) ? pArgLine : (pArgLine = new ArgLineElements());
	}
	
	public ParserRule getArgLineRule() {
		return getArgLineAccess().getRule();
	}

	//ExplicitArgList:
	//	lines+=ArgLine (TERMINATOR lines+=ArgLine | INDENT lines+=ArgLine OUTDENT)*;
	public ExplicitArgListElements getExplicitArgListAccess() {
		return (pExplicitArgList != null) ? pExplicitArgList : (pExplicitArgList = new ExplicitArgListElements());
	}
	
	public ParserRule getExplicitArgListRule() {
		return getExplicitArgListAccess().getRule();
	}

	//ArgList:
	//	{ArgList} (dummy=ExplicitArgList | INDENT dummy=ExplicitArgList OUTDENT)?;
	public ArgListElements getArgListAccess() {
		return (pArgList != null) ? pArgList : (pArgList = new ArgListElements());
	}
	
	public ParserRule getArgListRule() {
		return getArgListAccess().getRule();
	}

	//Array:
	//	LBRACKET ArgList RBRACKET;
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//// Object in coffeescript
	//Dictionary:
	//	LCURLY DictItems RCURLY;
	public DictionaryElements getDictionaryAccess() {
		return (pDictionary != null) ? pDictionary : (pDictionary = new DictionaryElements());
	}
	
	public ParserRule getDictionaryRule() {
		return getDictionaryAccess().getRule();
	}

	//DictItems:
	//	{DictItems} (dummy=ExplicitDictItems | INDENT dummy=ExplicitDictItems OUTDENT)?;
	public DictItemsElements getDictItemsAccess() {
		return (pDictItems != null) ? pDictItems : (pDictItems = new DictItemsElements());
	}
	
	public ParserRule getDictItemsRule() {
		return getDictItemsAccess().getRule();
	}

	//ExplicitDictItems:
	//	lines+=DictLine (TERMINATOR lines+=DictLine | INDENT lines+=DictLine OUTDENT)*;
	public ExplicitDictItemsElements getExplicitDictItemsAccess() {
		return (pExplicitDictItems != null) ? pExplicitDictItems : (pExplicitDictItems = new ExplicitDictItemsElements());
	}
	
	public ParserRule getExplicitDictItemsRule() {
		return getExplicitDictItemsAccess().getRule();
	}

	//DictLine:
	//	head=DictItem (COMMA tail+=DictItem)* COMMA?;
	public DictLineElements getDictLineAccess() {
		return (pDictLine != null) ? pDictLine : (pDictLine = new DictLineElements());
	}
	
	public ParserRule getDictLineRule() {
		return getDictLineAccess().getRule();
	}

	//DictItem:
	//	{DictItem} key=DictKey (COLON (value=Expression | INDENT value=Expression OUTDENT))?;
	public DictItemElements getDictItemAccess() {
		return (pDictItem != null) ? pDictItem : (pDictItem = new DictItemElements());
	}
	
	public ParserRule getDictItemRule() {
		return getDictItemAccess().getRule();
	}

	//DictKey:
	//	Literal | Id;
	public DictKeyElements getDictKeyAccess() {
		return (pDictKey != null) ? pDictKey : (pDictKey = new DictKeyElements());
	}
	
	public ParserRule getDictKeyRule() {
		return getDictKeyAccess().getRule();
	}

	//// Code in coffeescript
	//Lambda:
	//	(PARAM_START (params+=Param (COMMA params+=Param)*)? PARAM_END)? (FUNC_ARROW | BOUND_FUNC_ARROW) body=Block;
	public LambdaElements getLambdaAccess() {
		return (pLambda != null) ? pLambda : (pLambda = new LambdaElements());
	}
	
	public ParserRule getLambdaRule() {
		return getLambdaAccess().getRule();
	}

	//Param:
	//	(Id | Array | Dictionary | ThisProperty) (splat?=ELLIPSIS | EQUAL defaultValue=Expression)?;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//NumberLiteral:
	//	{NumberLiteral} NUMBER;
	public NumberLiteralElements getNumberLiteralAccess() {
		return (pNumberLiteral != null) ? pNumberLiteral : (pNumberLiteral = new NumberLiteralElements());
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//StringLiteral:
	//	{StringLiteral} STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BoolLiteral:
	//	{BoolLiteral} BOOL;
	public BoolLiteralElements getBoolLiteralAccess() {
		return (pBoolLiteral != null) ? pBoolLiteral : (pBoolLiteral = new BoolLiteralElements());
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}

	//JSLiteral:
	//	{JSLiteral} JS;
	public JSLiteralElements getJSLiteralAccess() {
		return (pJSLiteral != null) ? pJSLiteral : (pJSLiteral = new JSLiteralElements());
	}
	
	public ParserRule getJSLiteralRule() {
		return getJSLiteralAccess().getRule();
	}

	//RegexLiteral:
	//	{RegexLiteral} REGEX;
	public RegexLiteralElements getRegexLiteralAccess() {
		return (pRegexLiteral != null) ? pRegexLiteral : (pRegexLiteral = new RegexLiteralElements());
	}
	
	public ParserRule getRegexLiteralRule() {
		return getRegexLiteralAccess().getRule();
	}

	//Literal:
	//	NumberLiteral | StringLiteral | BoolLiteral | JSLiteral | RegexLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//Parenthetical:
	//	=> (LPAREN INDENT) content=Body OUTDENT RPAREN | LPAREN content=Body RPAREN;
	public ParentheticalElements getParentheticalAccess() {
		return (pParenthetical != null) ? pParenthetical : (pParenthetical = new ParentheticalElements());
	}
	
	public ParserRule getParentheticalRule() {
		return getParentheticalAccess().getRule();
	}

	//// terminals {{{
	/// * Note: these are only to enable debugging with Antlworks,
	// * The actual tokens are provided by the lexer.
	// * The debugger is smart in some cases, and emits different tokens
	// * for the same character depending on the context.
	// * For example
	// * "(1)" -> LPAREN NUMBER RPAREN
	// * "func()" -> IDENTIFIER CALL_START CALL_END
	// * But the debugger expects different strings for the tokens,
	// * so special ones get an additional asterisk:
	// * LPAREN: '('
	// * CALL_START: '(*'
	// * 
	// * To imitate indentation while debugging, use INDENT and OUTDENT, like this
	// *   if maybe {*
	// *     action()
	// *   *}
	// *   else {*
	// *     wait()
	// *   *}
	// * / // compound terminals at the beginning to they don't get shadowed
	//terminal ELLIPSIS:
	//	"...";
	public TerminalRule getELLIPSISRule() {
		return (tELLIPSIS != null) ? tELLIPSIS : (tELLIPSIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ELLIPSIS"));
	} 

	//terminal DOT_DOT:
	//	"..";
	public TerminalRule getDOT_DOTRule() {
		return (tDOT_DOT != null) ? tDOT_DOT : (tDOT_DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT_DOT"));
	} 

	//terminal DOUBLE_COLON:
	//	"::";
	public TerminalRule getDOUBLE_COLONRule() {
		return (tDOUBLE_COLON != null) ? tDOUBLE_COLON : (tDOUBLE_COLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE_COLON"));
	} 

	//terminal SHIFT:
	//	"<<" | ">>";
	public TerminalRule getSHIFTRule() {
		return (tSHIFT != null) ? tSHIFT : (tSHIFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SHIFT"));
	} 

	//terminal BOUND_FUNC_ARROW:
	//	"=>";
	public TerminalRule getBOUND_FUNC_ARROWRule() {
		return (tBOUND_FUNC_ARROW != null) ? tBOUND_FUNC_ARROW : (tBOUND_FUNC_ARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOUND_FUNC_ARROW"));
	} 

	//terminal FUNC_ARROW:
	//	"->";
	public TerminalRule getFUNC_ARROWRule() {
		return (tFUNC_ARROW != null) ? tFUNC_ARROW : (tFUNC_ARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FUNC_ARROW"));
	} 

	//terminal COMPARE:
	//	"<" | "==" | ">" | "<=" | ">=" | "!=";
	public TerminalRule getCOMPARERule() {
		return (tCOMPARE != null) ? tCOMPARE : (tCOMPARE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMPARE"));
	} 

	//terminal COMPOUND_ASSIGN:
	//	"+=" | "-=";
	public TerminalRule getCOMPOUND_ASSIGNRule() {
		return (tCOMPOUND_ASSIGN != null) ? tCOMPOUND_ASSIGN : (tCOMPOUND_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMPOUND_ASSIGN"));
	} 

	//terminal PLUS_PLUS:
	//	"++";
	public TerminalRule getPLUS_PLUSRule() {
		return (tPLUS_PLUS != null) ? tPLUS_PLUS : (tPLUS_PLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS_PLUS"));
	} 

	//terminal MINUS_MINUS:
	//	"--";
	public TerminalRule getMINUS_MINUSRule() {
		return (tMINUS_MINUS != null) ? tMINUS_MINUS : (tMINUS_MINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS_MINUS"));
	} 

	//terminal PARAM_END:
	//	"**)";
	public TerminalRule getPARAM_ENDRule() {
		return (tPARAM_END != null) ? tPARAM_END : (tPARAM_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARAM_END"));
	} 

	//terminal PARAM_START:
	//	"(**";
	public TerminalRule getPARAM_STARTRule() {
		return (tPARAM_START != null) ? tPARAM_START : (tPARAM_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARAM_START"));
	} 

	//terminal AT_SIGIL:
	//	"@";
	public TerminalRule getAT_SIGILRule() {
		return (tAT_SIGIL != null) ? tAT_SIGIL : (tAT_SIGIL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AT_SIGIL"));
	} 

	//terminal BOOL:
	//	"true" | "false" | "undefined" | "null" | "on" | "no" | "yes" | "off";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal BY:
	//	"by";
	public TerminalRule getBYRule() {
		return (tBY != null) ? tBY : (tBY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BY"));
	} 

	//terminal CALL_END:
	//	"*)";
	public TerminalRule getCALL_ENDRule() {
		return (tCALL_END != null) ? tCALL_END : (tCALL_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CALL_END"));
	} 

	//terminal CALL_START:
	//	"(*";
	public TerminalRule getCALL_STARTRule() {
		return (tCALL_START != null) ? tCALL_START : (tCALL_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CALL_START"));
	} 

	//terminal CATCH:
	//	"catch";
	public TerminalRule getCATCHRule() {
		return (tCATCH != null) ? tCATCH : (tCATCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CATCH"));
	} 

	//terminal CLASS:
	//	"class";
	public TerminalRule getCLASSRule() {
		return (tCLASS != null) ? tCLASS : (tCLASS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CLASS"));
	} 

	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal COLON_SLASH:
	//	"dummy COLON_SLASH";
	public TerminalRule getCOLON_SLASHRule() {
		return (tCOLON_SLASH != null) ? tCOLON_SLASH : (tCOLON_SLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON_SLASH"));
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal DOT:
	//	".";
	public TerminalRule getDOTRule() {
		return (tDOT != null) ? tDOT : (tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT"));
	} 

	//terminal ELSE:
	//	"else";
	public TerminalRule getELSERule() {
		return (tELSE != null) ? tELSE : (tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ELSE"));
	} 

	//terminal EQUAL:
	//	"=";
	public TerminalRule getEQUALRule() {
		return (tEQUAL != null) ? tEQUAL : (tEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQUAL"));
	} 

	//terminal EXTENDS:
	//	"extends";
	public TerminalRule getEXTENDSRule() {
		return (tEXTENDS != null) ? tEXTENDS : (tEXTENDS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXTENDS"));
	} 

	//terminal FINALLY:
	//	"finally";
	public TerminalRule getFINALLYRule() {
		return (tFINALLY != null) ? tFINALLY : (tFINALLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FINALLY"));
	} 

	//terminal FOR:
	//	"for";
	public TerminalRule getFORRule() {
		return (tFOR != null) ? tFOR : (tFOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FOR"));
	} 

	//terminal FORIN:
	//	"in";
	public TerminalRule getFORINRule() {
		return (tFORIN != null) ? tFORIN : (tFORIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FORIN"));
	} 

	//terminal FOROF:
	//	"of";
	public TerminalRule getFOROFRule() {
		return (tFOROF != null) ? tFOROF : (tFOROF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FOROF"));
	} 

	//terminal FUNC_EXIST:
	//	"dummy FUNC_EXIST";
	public TerminalRule getFUNC_EXISTRule() {
		return (tFUNC_EXIST != null) ? tFUNC_EXIST : (tFUNC_EXIST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FUNC_EXIST"));
	} 

	//terminal HERECOMMENT:
	//	"dummy HERECOMMENT";
	public TerminalRule getHERECOMMENTRule() {
		return (tHERECOMMENT != null) ? tHERECOMMENT : (tHERECOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HERECOMMENT"));
	} 

	//terminal IF:
	//	"if" | "unless";
	public TerminalRule getIFRule() {
		return (tIF != null) ? tIF : (tIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IF"));
	} 

	//terminal INDENT:
	//	"{*";
	public TerminalRule getINDENTRule() {
		return (tINDENT != null) ? tINDENT : (tINDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INDENT"));
	} 

	//terminal INDEX_END:
	//	"*]";
	public TerminalRule getINDEX_ENDRule() {
		return (tINDEX_END != null) ? tINDEX_END : (tINDEX_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INDEX_END"));
	} 

	//terminal INDEX_PROTO:
	//	"dummy INDEX_PROTO";
	public TerminalRule getINDEX_PROTORule() {
		return (tINDEX_PROTO != null) ? tINDEX_PROTO : (tINDEX_PROTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INDEX_PROTO"));
	} 

	//terminal INDEX_SOAK:
	//	"dummy INDEX_SOAK";
	public TerminalRule getINDEX_SOAKRule() {
		return (tINDEX_SOAK != null) ? tINDEX_SOAK : (tINDEX_SOAK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INDEX_SOAK"));
	} 

	//terminal INDEX_START:
	//	"[*";
	public TerminalRule getINDEX_STARTRule() {
		return (tINDEX_START != null) ? tINDEX_START : (tINDEX_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INDEX_START"));
	} 

	//terminal JS:
	//	"dummy JS";
	public TerminalRule getJSRule() {
		return (tJS != null) ? tJS : (tJS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JS"));
	} 

	//terminal LBRACKET:
	//	"[";
	public TerminalRule getLBRACKETRule() {
		return (tLBRACKET != null) ? tLBRACKET : (tLBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACKET"));
	} 

	//terminal LCURLY:
	//	"dummy LCURLY";
	public TerminalRule getLCURLYRule() {
		return (tLCURLY != null) ? tLCURLY : (tLCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LCURLY"));
	} 

	//terminal LEADING_WHEN:
	//	"dummy LEADING_WHEN";
	public TerminalRule getLEADING_WHENRule() {
		return (tLEADING_WHEN != null) ? tLEADING_WHEN : (tLEADING_WHEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LEADING_WHEN"));
	} 

	//terminal LOGIC:
	//	"&&" | "||";
	public TerminalRule getLOGICRule() {
		return (tLOGIC != null) ? tLOGIC : (tLOGIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LOGIC"));
	} 

	//terminal LOOP:
	//	"loop";
	public TerminalRule getLOOPRule() {
		return (tLOOP != null) ? tLOOP : (tLOOP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LOOP"));
	} 

	//terminal LPAREN:
	//	"(";
	public TerminalRule getLPARENRule() {
		return (tLPAREN != null) ? tLPAREN : (tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPAREN"));
	} 

	//terminal MATH:
	//	"*" | "/";
	public TerminalRule getMATHRule() {
		return (tMATH != null) ? tMATH : (tMATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MATH"));
	} 

	//terminal MINUS:
	//	"-";
	public TerminalRule getMINUSRule() {
		return (tMINUS != null) ? tMINUS : (tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS"));
	} 

	//terminal NEW:
	//	"new";
	public TerminalRule getNEWRule() {
		return (tNEW != null) ? tNEW : (tNEW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEW"));
	} 

	//terminal NUMBER returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal OUTDENT:
	//	"*}";
	public TerminalRule getOUTDENTRule() {
		return (tOUTDENT != null) ? tOUTDENT : (tOUTDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OUTDENT"));
	} 

	//terminal OWN:
	//	"own";
	public TerminalRule getOWNRule() {
		return (tOWN != null) ? tOWN : (tOWN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OWN"));
	} 

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return (tPLUS != null) ? tPLUS : (tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS"));
	} 

	//// practically the same as IF
	//terminal POST_IF:
	//	"dummy POST_IF";
	public TerminalRule getPOST_IFRule() {
		return (tPOST_IF != null) ? tPOST_IF : (tPOST_IF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POST_IF"));
	} 

	//terminal QUESTION:
	//	"?";
	public TerminalRule getQUESTIONRule() {
		return (tQUESTION != null) ? tQUESTION : (tQUESTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUESTION"));
	} 

	//terminal QUESTION_DOT:
	//	"?.";
	public TerminalRule getQUESTION_DOTRule() {
		return (tQUESTION_DOT != null) ? tQUESTION_DOT : (tQUESTION_DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUESTION_DOT"));
	} 

	//terminal RBRACKET:
	//	"]";
	public TerminalRule getRBRACKETRule() {
		return (tRBRACKET != null) ? tRBRACKET : (tRBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACKET"));
	} 

	//terminal RCURLY:
	//	"dummy RCURLY";
	public TerminalRule getRCURLYRule() {
		return (tRCURLY != null) ? tRCURLY : (tRCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RCURLY"));
	} 

	//terminal REGEX:
	//	"///"->"///";
	public TerminalRule getREGEXRule() {
		return (tREGEX != null) ? tREGEX : (tREGEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REGEX"));
	} 

	//terminal RELATION:
	//	"in" | "of" | "instanceof";
	public TerminalRule getRELATIONRule() {
		return (tRELATION != null) ? tRELATION : (tRELATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RELATION"));
	} 

	//terminal RETURN:
	//	"return";
	public TerminalRule getRETURNRule() {
		return (tRETURN != null) ? tRETURN : (tRETURN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RETURN"));
	} 

	//terminal RPAREN:
	//	")";
	public TerminalRule getRPARENRule() {
		return (tRPAREN != null) ? tRPAREN : (tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPAREN"));
	} 

	//terminal STATEMENT:
	//	"break" | "continue" | "debugger";
	public TerminalRule getSTATEMENTRule() {
		return (tSTATEMENT != null) ? tSTATEMENT : (tSTATEMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STATEMENT"));
	} 

	//terminal STRING:
	//	"\'\'\'"->"\'\'\'" | "\'" (!"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))*)?
	//	"\'" | "\"\"\""->"\"\"\"" | "\"" (!"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" |
	//	"\""))*)? "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal SUPER:
	//	"super";
	public TerminalRule getSUPERRule() {
		return (tSUPER != null) ? tSUPER : (tSUPER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SUPER"));
	} 

	//terminal SWITCH:
	//	"switch";
	public TerminalRule getSWITCHRule() {
		return (tSWITCH != null) ? tSWITCH : (tSWITCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SWITCH"));
	} 

	//terminal TERMINATOR:
	//	"\n"+;
	public TerminalRule getTERMINATORRule() {
		return (tTERMINATOR != null) ? tTERMINATOR : (tTERMINATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TERMINATOR"));
	} 

	//terminal THEN:
	//	"then";
	public TerminalRule getTHENRule() {
		return (tTHEN != null) ? tTHEN : (tTHEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "THEN"));
	} 

	//terminal THIS:
	//	"this";
	public TerminalRule getTHISRule() {
		return (tTHIS != null) ? tTHIS : (tTHIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "THIS"));
	} 

	//terminal THROW:
	//	"throw";
	public TerminalRule getTHROWRule() {
		return (tTHROW != null) ? tTHROW : (tTHROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "THROW"));
	} 

	//terminal TRY:
	//	"try";
	public TerminalRule getTRYRule() {
		return (tTRY != null) ? tTRY : (tTRY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TRY"));
	} 

	//terminal UNARY:
	//	"!" | "~";
	public TerminalRule getUNARYRule() {
		return (tUNARY != null) ? tUNARY : (tUNARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNARY"));
	} 

	//terminal UNTIL:
	//	"until";
	public TerminalRule getUNTILRule() {
		return (tUNTIL != null) ? tUNTIL : (tUNTIL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNTIL"));
	} 

	//terminal WHEN:
	//	"when";
	public TerminalRule getWHENRule() {
		return (tWHEN != null) ? tWHEN : (tWHEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WHEN"));
	} 

	//terminal WHILE:
	//	"while";
	public TerminalRule getWHILERule() {
		return (tWHILE != null) ? tWHILE : (tWHILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WHILE"));
	} 

	//// These tokens are used only by syntax coloring
	//terminal LOGIC_WORD:
	//	"and" | "or";
	public TerminalRule getLOGIC_WORDRule() {
		return (tLOGIC_WORD != null) ? tLOGIC_WORD : (tLOGIC_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LOGIC_WORD"));
	} 

	//terminal COMPARE_WORD:
	//	"isnt" | "is";
	public TerminalRule getCOMPARE_WORDRule() {
		return (tCOMPARE_WORD != null) ? tCOMPARE_WORD : (tCOMPARE_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMPARE_WORD"));
	} 

	//terminal UNARY_WORD:
	//	"new" | "do" | "not";
	public TerminalRule getUNARY_WORDRule() {
		return (tUNARY_WORD != null) ? tUNARY_WORD : (tUNARY_WORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNARY_WORD"));
	} 

	//terminal ML_COMMENT:
	//	"###" !"#"->"###";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//// Put it at the end, so keywords will be matched earlier
	//// }}} end of terminals
	//// vim: set fdm=marker:
	//terminal IDENTIFIER:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDENTIFIERRule() {
		return (tIDENTIFIER != null) ? tIDENTIFIER : (tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER"));
	} 
}
